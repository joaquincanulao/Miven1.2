import type { TSESTree } from '@typescript-eslint/types';
<<<<<<< HEAD
<<<<<<< HEAD
import { VisitorKeys } from '@typescript-eslint/visitor-keys';
=======
import type { VisitorKeys } from '@typescript-eslint/visitor-keys';
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
import type { VisitorKeys } from '@typescript-eslint/visitor-keys';
>>>>>>> cfa17b8e4 (favorite)
interface VisitorOptions {
    childVisitorKeys?: VisitorKeys | null;
    visitChildrenEvenIfSelectorExists?: boolean;
}
declare abstract class VisitorBase {
    #private;
    constructor(options: VisitorOptions);
    /**
     * Default method for visiting children.
     * @param node the node whose children should be visited
     * @param excludeArr a list of keys to not visit
     */
    visitChildren<T extends TSESTree.Node>(node: T | null | undefined, excludeArr?: (keyof T)[]): void;
    /**
     * Dispatching node.
     */
    visit(node: TSESTree.Node | null | undefined): void;
}
<<<<<<< HEAD
<<<<<<< HEAD
export { VisitorBase, VisitorOptions, VisitorKeys };
=======
export { VisitorBase, type VisitorOptions };
export type { VisitorKeys } from '@typescript-eslint/visitor-keys';
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
export { VisitorBase, type VisitorOptions };
export type { VisitorKeys } from '@typescript-eslint/visitor-keys';
>>>>>>> cfa17b8e4 (favorite)
//# sourceMappingURL=VisitorBase.d.ts.map