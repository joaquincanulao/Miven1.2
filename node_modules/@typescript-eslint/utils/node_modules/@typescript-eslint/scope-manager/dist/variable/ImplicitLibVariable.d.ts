import type { Scope } from '../scope';
<<<<<<< HEAD
<<<<<<< HEAD
import { ESLintScopeVariable } from './ESLintScopeVariable';
import type { Variable } from './Variable';
=======
import type { Variable } from './Variable';
import { ESLintScopeVariable } from './ESLintScopeVariable';
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
import type { Variable } from './Variable';
import { ESLintScopeVariable } from './ESLintScopeVariable';
>>>>>>> cfa17b8e4 (favorite)
interface ImplicitLibVariableOptions {
    readonly eslintImplicitGlobalSetting?: ESLintScopeVariable['eslintImplicitGlobalSetting'];
    readonly isTypeVariable?: boolean;
    readonly isValueVariable?: boolean;
    readonly writeable?: boolean;
}
/**
 * An variable implicitly defined by the TS Lib
 */
declare class ImplicitLibVariable extends ESLintScopeVariable implements Variable {
    /**
     * `true` if the variable is valid in a type context, false otherwise
     */
    readonly isTypeVariable: boolean;
    /**
     * `true` if the variable is valid in a value context, false otherwise
     */
    readonly isValueVariable: boolean;
<<<<<<< HEAD
<<<<<<< HEAD
    constructor(scope: Scope, name: string, { isTypeVariable, isValueVariable, writeable, eslintImplicitGlobalSetting, }: ImplicitLibVariableOptions);
}
export { ImplicitLibVariable, ImplicitLibVariableOptions };
=======
    constructor(scope: Scope, name: string, { eslintImplicitGlobalSetting, isTypeVariable, isValueVariable, writeable, }: ImplicitLibVariableOptions);
}
export { ImplicitLibVariable, type ImplicitLibVariableOptions };
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
    constructor(scope: Scope, name: string, { eslintImplicitGlobalSetting, isTypeVariable, isValueVariable, writeable, }: ImplicitLibVariableOptions);
}
export { ImplicitLibVariable, type ImplicitLibVariableOptions };
>>>>>>> cfa17b8e4 (favorite)
//# sourceMappingURL=ImplicitLibVariable.d.ts.map