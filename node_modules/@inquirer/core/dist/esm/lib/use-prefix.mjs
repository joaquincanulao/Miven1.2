import { AsyncResource } from 'node:async_hooks';
import { useState } from './use-state.mjs';
import { useEffect } from './use-effect.mjs';
import { makeTheme } from './make-theme.mjs';
<<<<<<< HEAD
export function usePrefix({ isLoading = false, theme, }) {
=======
export function usePrefix({ status = 'idle', theme, }) {
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
    const [showLoader, setShowLoader] = useState(false);
    const [tick, setTick] = useState(0);
    const { prefix, spinner } = makeTheme(theme);
    useEffect(() => {
<<<<<<< HEAD
        if (isLoading) {
=======
        if (status === 'loading') {
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
            let tickInterval;
            let inc = -1;
            // Delay displaying spinner by 300ms, to avoid flickering
            const delayTimeout = setTimeout(AsyncResource.bind(() => {
                setShowLoader(true);
                tickInterval = setInterval(AsyncResource.bind(() => {
                    inc = inc + 1;
                    setTick(inc % spinner.frames.length);
                }), spinner.interval);
            }), 300);
            return () => {
                clearTimeout(delayTimeout);
                clearInterval(tickInterval);
            };
        }
        else {
            setShowLoader(false);
        }
<<<<<<< HEAD
    }, [isLoading]);
    if (showLoader) {
        return spinner.frames[tick];
    }
    return prefix;
=======
    }, [status]);
    if (showLoader) {
        return spinner.frames[tick];
    }
    // There's a delay before we show the loader. So we want to ignore `loading` here, and pass idle instead.
    const iconName = status === 'loading' ? 'idle' : status;
    return typeof prefix === 'string' ? prefix : prefix[iconName];
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
}
