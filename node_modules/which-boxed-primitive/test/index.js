'use strict';

var test = require('tape');
var inspect = require('object-inspect');
<<<<<<< HEAD
<<<<<<< HEAD
var whichBoxedPrimitive = require('..');

var debug = function (v, m) { return inspect(v) + ' ' + m; };

var forEach = function (arr, func) {
	var i;
	for (i = 0; i < arr.length; ++i) {
		func(arr[i], i, arr);
	}
};

var hasSymbols = require('has-symbols')();
var hasBigInts = typeof BigInt === 'function';

var primitives = [
	true,
	false,
	42,
	NaN,
	Infinity,
	'',
	'foo'
].concat(
	hasSymbols ? [Symbol(), Symbol.iterator] : [],
	hasBigInts ? BigInt(42) : []
);
=======
=======
>>>>>>> cfa17b8e4 (favorite)
var forEach = require('for-each');
var v = require('es-value-fixtures');

var whichBoxedPrimitive = require('../');
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)

var objects = [
	/a/g,
	new Date(),
	function () {},
	[],
	{}
<<<<<<< HEAD
<<<<<<< HEAD
];

test('isBoxedPrimitive', function (t) {
	t.test('unboxed primitives', function (st) {
		forEach([null, undefined].concat(primitives), function (primitive) {
			st.equal(null, whichBoxedPrimitive(primitive), debug(primitive, 'is a primitive, but not a boxed primitive'));
=======
=======
>>>>>>> cfa17b8e4 (favorite)
].concat(v.objects);

test('isBoxedPrimitive', function (t) {
	t.test('unboxed primitives', function (st) {
		forEach(v.primitives, function (primitive) {
			st.equal(null, whichBoxedPrimitive(primitive), inspect(primitive) + ' is a primitive, but not a boxed primitive');
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
		});
		st.end();
	});

	t.test('boxed primitives', function (st) {
<<<<<<< HEAD
<<<<<<< HEAD
		forEach(primitives, function (primitive) {
			var boxed = Object(primitive);
			var expected = boxed.constructor.name;
			st.equal(typeof expected, 'string', 'expected is string');
			st.equal(whichBoxedPrimitive(boxed), expected, debug(boxed, 'is a boxed primitive: ' + expected));
=======
=======
>>>>>>> cfa17b8e4 (favorite)
		forEach(v.primitives, function (primitive) {
			if (primitive != null) { // eslint-disable-line eqeqeq
				var boxed = Object(primitive);
				var expected = boxed.constructor.name;
				st.equal(typeof expected, 'string', 'expected is string');
				st.equal(whichBoxedPrimitive(boxed), expected, inspect(boxed) + ' is a boxed primitive: ' + expected);
			}
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
		});
		st.end();
	});

	t.test('non-primitive objects', function (st) {
		forEach(objects, function (object) {
<<<<<<< HEAD
<<<<<<< HEAD
			st.equal(undefined, whichBoxedPrimitive(object), debug(object, 'is not a primitive, boxed or otherwise'));
=======
			st.equal(undefined, whichBoxedPrimitive(object), inspect(object) + ' is not a primitive, boxed or otherwise');
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
			st.equal(undefined, whichBoxedPrimitive(object), inspect(object) + ' is not a primitive, boxed or otherwise');
>>>>>>> cfa17b8e4 (favorite)
		});
		st.end();
	});

	t.end();
});
