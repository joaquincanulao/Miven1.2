import { computeValue } from "../../../core";
<<<<<<< HEAD
<<<<<<< HEAD
import { getType, MAX_INT, MIN_INT } from "../../../util";
const $type = (obj, expr, options) => {
  const val = computeValue(obj, expr, null, options);
  const typename = getType(val);
  const nativeType = typename.toLowerCase();
  switch (nativeType) {
    case "boolean":
      return "bool";
    case "number":
      if (val.toString().indexOf(".") >= 0)
        return "double";
      return val >= MIN_INT && val <= MAX_INT ? "int" : "long";
    case "regexp":
      return "regex";
    default:
      return nativeType;
  }
=======
=======
>>>>>>> cfa17b8e4 (favorite)
import { isNumber, isRegExp, typeOf } from "../../../util";
import { MAX_INT, MIN_INT } from "./_internal";
const $type = (obj, expr, options) => {
  const v = computeValue(obj, expr, null, options);
  if (options.useStrictMode) {
    if (v === void 0) return "missing";
    if (v === true || v === false) return "bool";
    if (isNumber(v)) {
      if (v % 1 != 0) return "double";
      return v >= MIN_INT && v <= MAX_INT ? "int" : "long";
    }
    if (isRegExp(v)) return "regex";
  }
  return typeOf(v);
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
};
export {
  $type
};
