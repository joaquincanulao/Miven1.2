import { computeValue } from "../../../core";
<<<<<<< HEAD
<<<<<<< HEAD
import { isNil, isNumber, isString } from "../../../util";
=======
=======
>>>>>>> cfa17b8e4 (favorite)
import { isDate, isNil, isNumber, isString } from "../../../util";
const MAX_INT = 2147483647;
const MIN_INT = -2147483648;
const MAX_LONG = Number.MAX_SAFE_INTEGER;
const MIN_LONG = Number.MIN_SAFE_INTEGER;
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
class TypeConvertError extends Error {
  constructor(message) {
    super(message);
  }
}
<<<<<<< HEAD
<<<<<<< HEAD
function toInteger(obj, expr, options, max, min, typename) {
  const val = computeValue(obj, expr, null, options);
  if (isNil(val))
    return null;
  if (val instanceof Date)
    return val.getTime();
  if (val === true)
    return 1;
  if (val === false)
    return 0;
=======
=======
>>>>>>> cfa17b8e4 (favorite)
function toInteger(obj, expr, options, min, max) {
  const val = computeValue(obj, expr, null, options);
  if (val === true) return 1;
  if (val === false) return 0;
  if (isNil(val)) return null;
  if (isDate(val)) return val.getTime();
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
  const n = Number(val);
  if (isNumber(n) && n >= min && n <= max) {
    if (!isString(val) || n.toString().indexOf(".") === -1) {
      return Math.trunc(n);
    }
  }
<<<<<<< HEAD
<<<<<<< HEAD
  throw new TypeConvertError(`cannot convert '${val}' to ${typename}`);
}
export {
=======
=======
>>>>>>> cfa17b8e4 (favorite)
  throw new TypeConvertError(
    `cannot convert '${val}' to ${max == MAX_INT ? "int" : "long"}`
  );
}
export {
  MAX_INT,
  MAX_LONG,
  MIN_INT,
  MIN_LONG,
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
  TypeConvertError,
  toInteger
};
