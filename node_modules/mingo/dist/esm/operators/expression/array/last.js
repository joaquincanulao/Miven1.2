<<<<<<< HEAD
import {
  ComputeOptions,
  computeValue
} from "../../../core";
import { assert, isArray, isNil } from "../../../util";
import { $last as __last } from "../../accumulator";
const $last = (obj, expr, options) => {
  const copts = ComputeOptions.init(options);
  if (obj instanceof Array)
    return __last(obj, expr, copts.update());
  const arr = computeValue(obj, expr, null, options);
  if (isNil(arr))
    return null;
  assert(isArray(arr), "Must resolve to an array/null or missing");
  return __last(arr, "$$this", options);
=======
import { computeValue } from "../../../core";
import { assert, flatten, isArray, isNil } from "../../../util";
import { $last as __last } from "../../accumulator/last";
const $last = (obj, expr, options) => {
  if (isArray(obj)) return __last(obj, expr, options);
  const arr = computeValue(obj, expr, null, options);
  if (isNil(arr)) return null;
  assert(
    isArray(arr) && arr.length > 0,
    "$last must resolve to a non-empty array."
  );
  return flatten(arr)[arr.length - 1];
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
};
export {
  $last
};
