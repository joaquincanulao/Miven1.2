<<<<<<< HEAD
<<<<<<< HEAD
import { AnyVal, TimeUnit } from "../../types";
=======
import { Any, TimeUnit } from "../../types";
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
import { Any, TimeUnit } from "../../types";
>>>>>>> cfa17b8e4 (favorite)
export type Boundary = "current" | "unbounded" | number;
export interface WindowOutputOption {
    readonly documents?: [Boundary, Boundary];
    readonly range?: [Boundary, Boundary];
    readonly unit?: TimeUnit;
}
export interface SetWindowFieldsInput {
<<<<<<< HEAD
<<<<<<< HEAD
    readonly partitionBy?: AnyVal;
    readonly sortBy: Record<string, 1 | -1>;
    readonly output: Record<string, {
        [x: string]: AnyVal;
=======
=======
>>>>>>> cfa17b8e4 (favorite)
    readonly partitionBy?: Any;
    readonly sortBy: Record<string, 1 | -1>;
    readonly output: Record<string, {
        [x: string]: Any;
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
        window?: WindowOutputOption;
    }>;
}
export interface WindowOperatorInput {
    readonly parentExpr: SetWindowFieldsInput;
<<<<<<< HEAD
<<<<<<< HEAD
    readonly inputExpr: AnyVal;
=======
    readonly inputExpr: Any;
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
    readonly inputExpr: Any;
>>>>>>> cfa17b8e4 (favorite)
    readonly documentNumber: number;
    readonly field: string;
}
/** Checks whether the specified window is unbounded. */
export declare const isUnbounded: (window: WindowOutputOption) => boolean;
