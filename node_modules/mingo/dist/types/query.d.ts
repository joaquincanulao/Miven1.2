import { Options } from "./core";
import { Cursor } from "./cursor";
import { Source } from "./lazy";
<<<<<<< HEAD
import { RawObject } from "./types";
/**
 * An object used to filter input documents
 *
 * @param {Object} condition The condition for constructing predicates
=======
import { AnyObject } from "./types";
/**
 * An object used to filter input documents
 *
 * @param {AnyObject} condition The condition for constructing predicates
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
 * @param {Options} options Options for use by operators
 * @constructor
 */
export declare class Query {
<<<<<<< HEAD
    private readonly condition;
    private readonly compiled;
    private readonly options;
    constructor(condition: RawObject, options?: Partial<Options>);
=======
    #private;
    constructor(condition: AnyObject, options?: Partial<Options>);
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
    private compile;
    private processOperator;
    /**
     * Checks if the object passes the query criteria. Returns true if so, false otherwise.
     *
     * @param obj The object to test
     * @returns {boolean} True or false
     */
    test<T>(obj: T): boolean;
    /**
     * Returns a cursor to select matching documents from the input source.
     *
     * @param source A source providing a sequence of documents
     * @param projection An optional projection criteria
     * @returns {Cursor} A Cursor for iterating over the results
     */
<<<<<<< HEAD
    find<T>(collection: Source, projection?: RawObject): Cursor<T>;
=======
    find<T>(collection: Source, projection?: AnyObject): Cursor<T>;
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
    /**
     * Remove matched documents from the collection returning the remainder
     *
     * @param collection An array of documents
     * @returns {Array} A new array with matching elements removed
     */
    remove<T>(collection: T[]): T[];
}
