import "./init/basic";
import { Aggregator } from "./aggregator";
import { Options } from "./core";
import { Cursor } from "./cursor";
import { Source } from "./lazy";
import { Query } from "./query";
<<<<<<< HEAD
<<<<<<< HEAD
import { RawObject } from "./types";
export { Aggregator } from "./aggregator";
export { Query } from "./query";
=======
=======
>>>>>>> cfa17b8e4 (favorite)
import { AnyObject } from "./types";
import { createUpdater } from "./updater";
export { Aggregator } from "./aggregator";
export { Query } from "./query";
export { createUpdater, update } from "./updater";
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
/**
 * Performs a query on a collection and returns a cursor object.
 * Shorthand for `Query(criteria).find(collection, projection)`
 *
 * @param collection Array of objects
 * @param criteria Query criteria
 * @param projection Projection criteria
 * @param options
 * @returns {Cursor} A cursor of results
 */
<<<<<<< HEAD
<<<<<<< HEAD
export declare function find<T>(collection: Source, criteria: RawObject, projection?: RawObject, options?: Partial<Options>): Cursor<T>;
=======
export declare function find<T>(collection: Source, criteria: AnyObject, projection?: AnyObject, options?: Partial<Options>): Cursor<T>;
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
export declare function find<T>(collection: Source, criteria: AnyObject, projection?: AnyObject, options?: Partial<Options>): Cursor<T>;
>>>>>>> cfa17b8e4 (favorite)
/**
 * Returns a new array without objects which match the criteria
 *
 * @param collection Array of objects
 * @param criteria Query criteria of objects to remove
 * @param options
 * @returns {Array} New filtered array
 */
<<<<<<< HEAD
<<<<<<< HEAD
export declare function remove(collection: RawObject[], criteria: RawObject, options?: Options): RawObject[];
=======
export declare function remove(collection: AnyObject[], criteria: AnyObject, options?: Options): AnyObject[];
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
export declare function remove(collection: AnyObject[], criteria: AnyObject, options?: Options): AnyObject[];
>>>>>>> cfa17b8e4 (favorite)
/**
 * Return the result collection after running the aggregation pipeline for the given collection.
 * Shorthand for `(new Aggregator(pipeline, options)).run(collection)`
 *
 * @param collection array or stream of objects
 * @param pipeline The pipeline operators to use
 * @param options
 * @returns {Array} New array of results
 */
<<<<<<< HEAD
<<<<<<< HEAD
export declare function aggregate(collection: Source, pipeline: RawObject[], options?: Partial<Options>): RawObject[];
=======
export declare function aggregate(collection: Source, pipeline: AnyObject[], options?: Partial<Options>): AnyObject[];
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
export declare function aggregate(collection: Source, pipeline: AnyObject[], options?: Partial<Options>): AnyObject[];
>>>>>>> cfa17b8e4 (favorite)
declare const _default: {
    Aggregator: typeof Aggregator;
    Query: typeof Query;
    aggregate: typeof aggregate;
<<<<<<< HEAD
<<<<<<< HEAD
    find: typeof find;
    remove: typeof remove;
=======
=======
>>>>>>> cfa17b8e4 (favorite)
    createUpdater: typeof createUpdater;
    find: typeof find;
    remove: typeof remove;
    update: import("./updater").Updater;
<<<<<<< HEAD
>>>>>>> 7cb31df57 (se integro la edicion de las recetas)
=======
>>>>>>> cfa17b8e4 (favorite)
};
export default _default;
