{"ast":null,"code":"import _asyncToGenerator from \"/home/jcanulao/Documentos/Miven1.0.0-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _LoginPage;\nimport { getMessaging, getToken } from \"firebase/messaging\";\nimport { environment } from '../../environments/environment';\nimport firebase from 'firebase/compat/app'; // Importa el módulo de Firebase para acceder a los proveedores de autenticación\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@ionic/angular\";\nimport * as i7 from \"@angular/router\";\nfunction LoginPage_ion_text_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-text\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nexport class LoginPage {\n  constructor(authService, afAuth,\n  // Servicio para autenticación\n  firestore // Servicio para interactuar con Firestore\n  ) {\n    this.authService = authService;\n    this.afAuth = afAuth;\n    this.firestore = firestore;\n    this.email = '';\n    this.password = '';\n    this.errorMessage = ''; // Variable para almacenar el mensaje de error\n  }\n  onLogin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Configura la persistencia de sesión antes de iniciar sesión\n        yield _this.afAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL); // Persistencia local\n        // Iniciar sesión con las credenciales\n        yield _this.authService.loginUser(_this.email, _this.password);\n        console.log('Inicio de sesión exitoso');\n        // Obtener el usuario autenticado\n        const user = yield _this.afAuth.currentUser;\n        if (user) {\n          // Llamar a la función para obtener y almacenar el token FCM\n          _this.saveFcmToken(user.uid);\n        }\n      } catch (error) {\n        console.error('Error al iniciar sesión: ', error);\n        _this.errorMessage = _this.getErrorMessage(error); // Manejo del mensaje de error\n      }\n    })();\n  }\n  // Nuevo método para iniciar sesión con Google\n  onGoogleLogin() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.afAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL); // Persistencia local para Google\n        yield _this2.authService.loginWithGoogle();\n        console.log('Inicio de sesión con Google exitoso');\n      } catch (error) {\n        _this2.errorMessage = _this2.getErrorMessage(error);\n      }\n    })();\n  }\n  getErrorMessage(error) {\n    switch (error.code) {\n      case 'auth/invalid-credential':\n        return 'Las credenciales proporcionadas no son válidas. Por favor, verifica tu correo electrónico y contraseña.';\n      case 'auth/user-not-found':\n        return 'Usuario no encontrado. Por favor, registra una nueva cuenta.';\n      case 'auth/wrong-password':\n        return 'Contraseña incorrecta. Por favor, intenta de nuevo.';\n      default:\n        return 'Ha ocurrido un error desconocido. Por favor, intenta de nuevo más tarde.';\n    }\n  }\n  // Función para obtener el token FCM y guardarlo en Firestore\n  saveFcmToken(userId) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const messaging = getMessaging();\n        const currentToken = yield getToken(messaging, {\n          vapidKey: environment.vapidKey\n        });\n        if (currentToken) {\n          // Guardar el token FCM en Firestore bajo el documento del usuario\n          const userRef = _this3.firestore.collection('usuarios').doc(userId);\n          yield userRef.update({\n            fcmToken: currentToken\n          });\n          console.log('Token FCM guardado en Firestore');\n        } else {\n          console.log('No token available');\n        }\n      } catch (err) {\n        console.error('Error obteniendo el token FCM: ', err);\n      }\n    })();\n  }\n}\n_LoginPage = LoginPage;\n_LoginPage.ɵfac = function LoginPage_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _LoginPage)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.AngularFireAuth), i0.ɵɵdirectiveInject(i3.AngularFirestore));\n};\n_LoginPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _LoginPage,\n  selectors: [[\"app-login\"]],\n  decls: 23,\n  vars: 3,\n  consts: [[1, \"ion-padding\"], [\"position\", \"floating\"], [\"type\", \"email\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"password\", 3, \"ngModelChange\", \"ngModel\"], [\"expand\", \"full\", 3, \"click\"], [\"expand\", \"full\", \"color\", \"medium\", 3, \"click\"], [\"name\", \"logo-google\", \"slot\", \"start\"], [\"expand\", \"full\", \"fill\", \"clear\", \"routerLink\", \"/register\"], [\"color\", \"danger\", 4, \"ngIf\"], [\"color\", \"danger\"]],\n  template: function LoginPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n      i0.ɵɵtext(3, \"Iniciar Sesi\\u00F3n\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(4, \"ion-content\", 0)(5, \"ion-card\")(6, \"ion-card-content\")(7, \"ion-item\")(8, \"ion-label\", 1);\n      i0.ɵɵtext(9, \"Correo Electr\\u00F3nico\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"ion-input\", 2);\n      i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginPage_Template_ion_input_ngModelChange_10_listener($event) {\n        i0.ɵɵtwoWayBindingSet(ctx.email, $event) || (ctx.email = $event);\n        return $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"ion-item\")(12, \"ion-label\", 1);\n      i0.ɵɵtext(13, \"Contrase\\u00F1a\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"ion-input\", 3);\n      i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginPage_Template_ion_input_ngModelChange_14_listener($event) {\n        i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n        return $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"ion-button\", 4);\n      i0.ɵɵlistener(\"click\", function LoginPage_Template_ion_button_click_15_listener() {\n        return ctx.onLogin();\n      });\n      i0.ɵɵtext(16, \"Iniciar Sesi\\u00F3n\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"ion-button\", 5);\n      i0.ɵɵlistener(\"click\", function LoginPage_Template_ion_button_click_17_listener() {\n        return ctx.onGoogleLogin();\n      });\n      i0.ɵɵelement(18, \"ion-icon\", 6);\n      i0.ɵɵtext(19, \" Iniciar sesi\\u00F3n con Google \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"ion-button\", 7);\n      i0.ɵɵtext(21, \"Crear Cuenta\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(22, LoginPage_ion_text_22_Template, 2, 1, \"ion-text\", 8);\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(10);\n      i0.ɵɵtwoWayProperty(\"ngModel\", ctx.email);\n      i0.ɵɵadvance(4);\n      i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n    }\n  },\n  dependencies: [i4.NgIf, i5.NgControlStatus, i5.NgModel, i6.IonButton, i6.IonCard, i6.IonCardContent, i6.IonContent, i6.IonHeader, i6.IonIcon, i6.IonInput, i6.IonItem, i6.IonLabel, i6.IonText, i6.IonTitle, i6.IonToolbar, i6.TextValueAccessor, i6.RouterLinkDelegate, i7.RouterLink],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["getMessaging","getToken","environment","firebase","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate","ctx_r0","errorMessage","LoginPage","constructor","authService","afAuth","firestore","email","password","onLogin","_this","_asyncToGenerator","setPersistence","auth","Auth","Persistence","LOCAL","loginUser","console","log","user","currentUser","saveFcmToken","uid","error","getErrorMessage","onGoogleLogin","_this2","loginWithGoogle","code","userId","_this3","messaging","currentToken","vapidKey","userRef","collection","doc","update","fcmToken","err","ɵɵdirectiveInject","i1","AuthService","i2","AngularFireAuth","i3","AngularFirestore","selectors","decls","vars","consts","template","LoginPage_Template","rf","ctx","ɵɵtwoWayListener","LoginPage_Template_ion_input_ngModelChange_10_listener","$event","ɵɵtwoWayBindingSet","LoginPage_Template_ion_input_ngModelChange_14_listener","ɵɵlistener","LoginPage_Template_ion_button_click_15_listener","LoginPage_Template_ion_button_click_17_listener","ɵɵelement","ɵɵtemplate","LoginPage_ion_text_22_Template","ɵɵtwoWayProperty","ɵɵproperty"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/login/login.page.ts","/home/jcanulao/Documentos/Miven1.0.0-main/src/app/login/login.page.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { AuthService } from '../services/auth.service';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getMessaging, getToken } from \"firebase/messaging\";\nimport { environment } from '../../environments/environment';\nimport firebase from 'firebase/compat/app'; // Importa el módulo de Firebase para acceder a los proveedores de autenticación\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\nexport class LoginPage {\n  email: string = '';\n  password: string = '';\n  errorMessage: string = ''; // Variable para almacenar el mensaje de error\n\n  constructor(\n    private authService: AuthService,\n    private afAuth: AngularFireAuth, // Servicio para autenticación\n    private firestore: AngularFirestore // Servicio para interactuar con Firestore\n  ) {}\n\n  async onLogin() {\n    try {\n      // Configura la persistencia de sesión antes de iniciar sesión\n      await this.afAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL); // Persistencia local\n\n      // Iniciar sesión con las credenciales\n      await this.authService.loginUser(this.email, this.password);\n      console.log('Inicio de sesión exitoso');\n\n      // Obtener el usuario autenticado\n      const user = await this.afAuth.currentUser;\n\n      if (user) {\n        // Llamar a la función para obtener y almacenar el token FCM\n        this.saveFcmToken(user.uid);\n      }\n    } catch (error) {\n      console.error('Error al iniciar sesión: ', error);\n      this.errorMessage = this.getErrorMessage(error); // Manejo del mensaje de error\n    }\n  }\n\n  // Nuevo método para iniciar sesión con Google\n  async onGoogleLogin() {\n    try {\n      await this.afAuth.setPersistence(firebase.auth.Auth.Persistence.LOCAL); // Persistencia local para Google\n      await this.authService.loginWithGoogle();\n      console.log('Inicio de sesión con Google exitoso');\n    } catch (error) {\n      this.errorMessage = this.getErrorMessage(error);\n    }\n  }\n\n  getErrorMessage(error: any): string {\n    switch (error.code) {\n      case 'auth/invalid-credential':\n        return 'Las credenciales proporcionadas no son válidas. Por favor, verifica tu correo electrónico y contraseña.';\n      case 'auth/user-not-found':\n        return 'Usuario no encontrado. Por favor, registra una nueva cuenta.';\n      case 'auth/wrong-password':\n        return 'Contraseña incorrecta. Por favor, intenta de nuevo.';\n      default:\n        return 'Ha ocurrido un error desconocido. Por favor, intenta de nuevo más tarde.';\n    }\n  }\n\n  // Función para obtener el token FCM y guardarlo en Firestore\n  async saveFcmToken(userId: string) {\n    try {\n      const messaging = getMessaging();\n      const currentToken = await getToken(messaging, { vapidKey: environment.vapidKey });\n\n      if (currentToken) {\n        // Guardar el token FCM en Firestore bajo el documento del usuario\n        const userRef = this.firestore.collection('usuarios').doc(userId);\n        await userRef.update({ fcmToken: currentToken });\n        console.log('Token FCM guardado en Firestore');\n      } else {\n        console.log('No token available');\n      }\n    } catch (err) {\n      console.error('Error obteniendo el token FCM: ', err);\n    }\n  }\n}\n","<ion-header>\n  <ion-toolbar>\n    <ion-title>Iniciar Sesión</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n  <ion-card>\n    <ion-card-content>\n      <ion-item>\n        <ion-label position=\"floating\">Correo Electrónico</ion-label>\n        <ion-input type=\"email\" [(ngModel)]=\"email\"></ion-input>\n      </ion-item>\n      <ion-item>\n        <ion-label position=\"floating\">Contraseña</ion-label>\n        <ion-input type=\"password\" [(ngModel)]=\"password\"></ion-input>\n      </ion-item>\n      <!-- Botón de inicio de sesión con correo y contraseña -->\n      <ion-button expand=\"full\" (click)=\"onLogin()\">Iniciar Sesión</ion-button>\n      \n      <!-- Botón para iniciar sesión con Google -->\n      <ion-button expand=\"full\" color=\"medium\" (click)=\"onGoogleLogin()\">\n        <ion-icon name=\"logo-google\" slot=\"start\"></ion-icon>\n        Iniciar sesión con Google\n      </ion-button>\n\n      <!-- Enlace para crear una nueva cuenta -->\n      <ion-button expand=\"full\" fill=\"clear\" routerLink=\"/register\">Crear Cuenta</ion-button>\n      \n      <!-- Mensaje de error -->\n      <ion-text color=\"danger\" *ngIf=\"errorMessage\">{{ errorMessage }}</ion-text>\n    </ion-card-content>\n  </ion-card>\n</ion-content>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}