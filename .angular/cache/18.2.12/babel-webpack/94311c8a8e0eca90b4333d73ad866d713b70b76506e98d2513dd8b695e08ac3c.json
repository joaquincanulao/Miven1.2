{"ast":null,"code":"import _asyncToGenerator from \"/home/jcanulao/Documentos/Miven1.0.0-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _AuthService;\nimport firebase from 'firebase/compat/app';\nimport { getMessaging, getToken } from 'firebase/messaging';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nexport class AuthService {\n  constructor(auth, firestore, router) {\n    this.auth = auth;\n    this.firestore = firestore;\n    this.router = router;\n    this.requestPermission();\n  }\n  // Método para registrar usuarios\n  registerUser(email, password, nombre) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const userCredential = yield _this.auth.createUserWithEmailAndPassword(email, password);\n        const user = userCredential.user;\n        if (user) {\n          // Crear un documento para el usuario\n          yield _this.firestore.collection('usuarios').doc(user.uid).set({\n            nombre: nombre,\n            correo_electronico: email,\n            fecha_registro: new Date()\n          });\n          // Capturar y registrar el token FCM\n          try {\n            const messaging = getMessaging();\n            const fcmToken = yield getToken(messaging, {\n              vapidKey: 'TU_CLAVE_PUBLICA_VAPID'\n            });\n            if (fcmToken) {\n              yield _this.firestore.collection('usuarios').doc(user.uid).update({\n                fcmToken: fcmToken\n              });\n              console.log('Token FCM registrado:', fcmToken);\n            } else {\n              console.warn('No se pudo obtener el token FCM.');\n            }\n          } catch (error) {\n            console.error('Error al registrar el token FCM:', error);\n          }\n          // Crear una subcolección de inventario para el usuario recién registrado\n          const inventarioRef = _this.firestore.collection('usuarios').doc(user.uid).collection('inventario');\n          // Inicializar el inventario con algunos productos predeterminados o vacío\n          yield inventarioRef.add({\n            nombre_producto: 'Producto Ejemplo',\n            cantidad: 0,\n            unidad_medida: 'unidades',\n            fecha_caducidad: new Date(),\n            categoria: 'General'\n          });\n        }\n        _this.router.navigate(['./login']);\n      } catch (error) {\n        console.error('Error en el registro:', error);\n      }\n    })();\n  }\n  // Método para iniciar sesión de usuario\n  loginUser(email, password) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Intentar iniciar sesión con el correo y la contraseña\n        const userCredential = yield _this2.auth.signInWithEmailAndPassword(email, password);\n        const user = userCredential.user;\n        if (user) {\n          // Capturar y registrar el token FCM\n          yield _this2.registerFCMToken(user.uid);\n        }\n        // Navegar a la página principal solo si la autenticación fue exitosa\n        _this2.router.navigate(['./home']);\n        return userCredential;\n      } catch (error) {\n        // Manejar errores de inicio de sesión\n        console.error('Error en el inicio de sesión:', error);\n        throw error; // Lanza el error para que el componente que llama maneje el mensaje de error\n      }\n    })();\n  }\n  // Método para iniciar sesión con Google\n  // Método para iniciar sesión con Google y registrar al usuario en Firestore si es la primera vez\n  loginWithGoogle() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const result = yield _this3.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n        const user = result.user;\n        if (user) {\n          const userDocRef = _this3.firestore.collection('usuarios').doc(user.uid);\n          const userDoc = yield userDocRef.get().toPromise();\n          if (userDoc && !userDoc.exists) {\n            // Registrar al usuario en la colección 'usuarios' si no existe\n            yield userDocRef.set({\n              nombre: user.displayName,\n              correo_electronico: user.email,\n              fecha_registro: new Date()\n            });\n            // Inicializar inventario para el nuevo usuario\n            const inventarioRef = userDocRef.collection('inventario');\n            yield inventarioRef.add({\n              nombre_producto: 'Producto Ejemplo',\n              cantidad: 0,\n              unidad_medida: 'unidades',\n              fecha_caducidad: new Date(),\n              categoria: 'General'\n            });\n          }\n          // Registrar el token FCM\n          yield _this3.registerFCMToken(user.uid);\n        }\n        // Navegar a home si el inicio de sesión con Google es exitoso\n        _this3.router.navigate(['./home']);\n        return result;\n      } catch (error) {\n        console.error('Error al iniciar sesión con Google:', error);\n        throw error;\n      }\n    })();\n  }\n  // Método para cerrar sesión\n  logoutUser() {\n    return this.auth.signOut().then(() => {\n      this.router.navigate(['/login']);\n    });\n  }\n  // Método para obtener el usuario autenticado actual\n  getCurrentUser() {\n    return this.auth.currentUser;\n  }\n  // Obtener datos del usuario por ID\n  getUserData(uid) {\n    return this.firestore.collection('usuarios').doc(uid).valueChanges();\n  }\n  // Obtener el estado de autenticación del usuario actual\n  getInfoUser() {\n    return this.auth.authState;\n  }\n  // Método separado para registrar el token FCM\n  registerFCMToken(uid) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const messaging = getMessaging();\n        const token = yield getToken(messaging, {\n          vapidKey: 'TU_CLAVE_PUBLICA_VAPID'\n        });\n        if (token) {\n          yield _this4.firestore.collection('usuarios').doc(uid).update({\n            fcmToken: token\n          });\n          console.log('Token FCM registrado:', token);\n        } else {\n          console.log('No se pudo obtener el token.');\n        }\n      } catch (error) {\n        console.error('Error al registrar el token FCM:', error);\n      }\n    })();\n  }\n  requestPermission() {\n    return _asyncToGenerator(function* () {\n      try {\n        const messaging = getMessaging();\n        yield Notification.requestPermission();\n        console.log('Permiso de notificaciones concedido.');\n      } catch (error) {\n        console.error('Permiso de notificaciones denegado:', error);\n      }\n    })();\n  }\n}\n_AuthService = AuthService;\n_AuthService.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n};\n_AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _AuthService,\n  factory: _AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["firebase","getMessaging","getToken","AuthService","constructor","auth","firestore","router","requestPermission","registerUser","email","password","nombre","_this","_asyncToGenerator","userCredential","createUserWithEmailAndPassword","user","collection","doc","uid","set","correo_electronico","fecha_registro","Date","messaging","fcmToken","vapidKey","update","console","log","warn","error","inventarioRef","add","nombre_producto","cantidad","unidad_medida","fecha_caducidad","categoria","navigate","loginUser","_this2","signInWithEmailAndPassword","registerFCMToken","loginWithGoogle","_this3","result","signInWithPopup","GoogleAuthProvider","userDocRef","userDoc","get","toPromise","exists","displayName","logoutUser","signOut","then","getCurrentUser","currentUser","getUserData","valueChanges","getInfoUser","authState","_this4","token","Notification","i0","ɵɵinject","i1","AngularFireAuth","i2","AngularFirestore","i3","Router","factory","ɵfac","providedIn"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { Router } from '@angular/router';\nimport firebase from 'firebase/compat/app';\nimport { getMessaging, getToken, onMessage } from 'firebase/messaging';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  constructor(\n    private auth: AngularFireAuth,\n    private firestore: AngularFirestore,\n    private router: Router\n  ) {\n    this.requestPermission();\n  }\n\n  // Método para registrar usuarios\n  async registerUser(email: string, password: string, nombre: string) {\n    try {\n      const userCredential = await this.auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n\n      if (user) {\n        // Crear un documento para el usuario\n        await this.firestore.collection('usuarios').doc(user.uid).set({\n          nombre: nombre,\n          correo_electronico: email,\n          fecha_registro: new Date(),\n        });\n\n        // Capturar y registrar el token FCM\n        try {\n          const messaging = getMessaging();\n          const fcmToken = await getToken(messaging, { vapidKey: 'TU_CLAVE_PUBLICA_VAPID' });\n\n          if (fcmToken) {\n            await this.firestore.collection('usuarios').doc(user.uid).update({\n              fcmToken: fcmToken,\n            });\n            console.log('Token FCM registrado:', fcmToken);\n          } else {\n            console.warn('No se pudo obtener el token FCM.');\n          }\n        } catch (error) {\n          console.error('Error al registrar el token FCM:', error);\n        }\n\n        // Crear una subcolección de inventario para el usuario recién registrado\n        const inventarioRef = this.firestore.collection('usuarios').doc(user.uid).collection('inventario');\n\n        // Inicializar el inventario con algunos productos predeterminados o vacío\n        await inventarioRef.add({\n          nombre_producto: 'Producto Ejemplo',\n          cantidad: 0,\n          unidad_medida: 'unidades',\n          fecha_caducidad: new Date(),\n          categoria: 'General',\n        });\n      }\n\n      this.router.navigate(['./login']);\n    } catch (error) {\n      console.error('Error en el registro:', error);\n    }\n  }\n\n  // Método para iniciar sesión de usuario\n  async loginUser(email: string, password: string) {\n    try {\n      // Intentar iniciar sesión con el correo y la contraseña\n      const userCredential = await this.auth.signInWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n  \n      if (user) {\n        // Capturar y registrar el token FCM\n        await this.registerFCMToken(user.uid);\n      }\n  \n      // Navegar a la página principal solo si la autenticación fue exitosa\n      this.router.navigate(['./home']);\n      return userCredential;\n    } catch (error) {\n      // Manejar errores de inicio de sesión\n      console.error('Error en el inicio de sesión:', error);\n      throw error; // Lanza el error para que el componente que llama maneje el mensaje de error\n    }\n  }\n\n  // Método para iniciar sesión con Google\n // Método para iniciar sesión con Google y registrar al usuario en Firestore si es la primera vez\nasync loginWithGoogle() {\n  try {\n    const result = await this.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n    const user = result.user;\n\n    if (user) {\n      const userDocRef = this.firestore.collection('usuarios').doc(user.uid);\n      const userDoc = await userDocRef.get().toPromise();\n\n      if (userDoc && !userDoc.exists) {\n        // Registrar al usuario en la colección 'usuarios' si no existe\n        await userDocRef.set({\n          nombre: user.displayName,\n          correo_electronico: user.email,\n          fecha_registro: new Date(),\n        });\n\n        // Inicializar inventario para el nuevo usuario\n        const inventarioRef = userDocRef.collection('inventario');\n        await inventarioRef.add({\n          nombre_producto: 'Producto Ejemplo',\n          cantidad: 0,\n          unidad_medida: 'unidades',\n          fecha_caducidad: new Date(),\n          categoria: 'General',\n        });\n      }\n\n      // Registrar el token FCM\n      await this.registerFCMToken(user.uid);\n    }\n\n    // Navegar a home si el inicio de sesión con Google es exitoso\n    this.router.navigate(['./home']);\n    return result;\n  } catch (error) {\n    console.error('Error al iniciar sesión con Google:', error);\n    throw error;\n  }\n}\n\n  // Método para cerrar sesión\n  logoutUser() {\n    return this.auth.signOut().then(() => {\n      this.router.navigate(['/login']);\n    });\n  }\n\n  // Método para obtener el usuario autenticado actual\n  getCurrentUser() {\n    return this.auth.currentUser;\n  }\n\n  // Obtener datos del usuario por ID\n  getUserData(uid: string) {\n    return this.firestore.collection('usuarios').doc(uid).valueChanges();\n  }\n\n  // Obtener el estado de autenticación del usuario actual\n  getInfoUser() {\n    return this.auth.authState;\n  }\n\n  // Método separado para registrar el token FCM\n  async registerFCMToken(uid: string) {\n    try {\n      const messaging = getMessaging();\n      const token = await getToken(messaging, { vapidKey: 'TU_CLAVE_PUBLICA_VAPID' });\n\n      if (token) {\n        await this.firestore.collection('usuarios').doc(uid).update({\n          fcmToken: token,\n        });\n        console.log('Token FCM registrado:', token);\n      } else {\n        console.log('No se pudo obtener el token.');\n      }\n    } catch (error) {\n      console.error('Error al registrar el token FCM:', error);\n    }\n  }\n  async requestPermission() {\n    try {\n      const messaging = getMessaging();\n      await Notification.requestPermission();\n      console.log('Permiso de notificaciones concedido.');\n    } catch (error) {\n      console.error('Permiso de notificaciones denegado:', error);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}