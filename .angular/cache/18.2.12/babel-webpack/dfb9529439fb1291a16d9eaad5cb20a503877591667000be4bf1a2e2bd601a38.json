{"ast":null,"code":"var _NotificationsPushService;\nimport { inject } from '@angular/core';\nimport { PushNotifications } from '@capacitor/push-notifications';\nimport { InventoryService } from './inventory.service';\nimport * as i0 from \"@angular/core\";\nexport class NotificationsPushService {\n  constructor() {\n    this.InteractionService = inject(InventoryService);\n  }\n  init() {\n    console.log('Initializing NotificationsPushService');\n    PushNotifications.requestPermissions().then(result => {\n      if (result.receive === 'granted') {\n        // Register with Apple / Google to receive push via APNS/FCM\n        PushNotifications.register();\n      } else {\n        // Show some error\n        //this.InteractionService.presentAlert('error', 'Debes habilitar las notificaciones')\n      }\n    });\n    this.addListener();\n  }\n  addListener() {\n    // On success, we should be able to receive notifications\n    PushNotifications.addListener('registration', token => {\n      alert('Push registration success, token: ' + token.value);\n    });\n    // Some issue with our setup and push will not work\n    PushNotifications.addListener('registrationError', error => {\n      alert('Error on registration: ' + JSON.stringify(error));\n    });\n    // Show us the notification payload if the app is open on our device\n    PushNotifications.addListener('pushNotificationReceived', notification => {\n      alert('Push received: ' + JSON.stringify(notification));\n    });\n    // Method called when tapping on a notification\n    PushNotifications.addListener('pushNotificationActionPerformed', notification => {\n      alert('Push action performed: ' + JSON.stringify(notification));\n    });\n  }\n}\n_NotificationsPushService = NotificationsPushService;\n_NotificationsPushService.ɵfac = function NotificationsPushService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _NotificationsPushService)();\n};\n_NotificationsPushService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _NotificationsPushService,\n  factory: _NotificationsPushService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["inject","PushNotifications","InventoryService","NotificationsPushService","constructor","InteractionService","init","console","log","requestPermissions","then","result","receive","register","addListener","token","alert","value","error","JSON","stringify","notification","factory","ɵfac","providedIn"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/services/notifications-push.service.ts"],"sourcesContent":["import { inject, Injectable } from '@angular/core';\nimport {\n  ActionPerformed,\n  PushNotificationSchema,\n  PushNotifications,\n  Token,\n} from '@capacitor/push-notifications';\nimport {InventoryService} from './inventory.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationsPushService {\n\n  private InteractionService: InventoryService = inject(InventoryService)\n\n  constructor() { }\n\ninit() {\n  console.log('Initializing NotificationsPushService');\n  PushNotifications.requestPermissions().then(result => {\n    if (result.receive === 'granted') {\n      // Register with Apple / Google to receive push via APNS/FCM\n      PushNotifications.register();\n    } else {\n      // Show some error\n      //this.InteractionService.presentAlert('error', 'Debes habilitar las notificaciones')\n    }\n  });\n  this.addListener();\n}\n\nprivate addListener(){\n\n // On success, we should be able to receive notifications\n PushNotifications.addListener('registration',\n  (token: Token) => {\n    alert('Push registration success, token: ' + token.value);\n  }\n);\n\n// Some issue with our setup and push will not work\nPushNotifications.addListener('registrationError',\n  (error: any) => {\n    alert('Error on registration: ' + JSON.stringify(error));\n  }\n);\n\n// Show us the notification payload if the app is open on our device\nPushNotifications.addListener('pushNotificationReceived',\n  (notification: PushNotificationSchema) => {\n    alert('Push received: ' + JSON.stringify(notification));\n  }\n);\n\n// Method called when tapping on a notification\nPushNotifications.addListener('pushNotificationActionPerformed',\n  (notification: ActionPerformed) => {\n    alert('Push action performed: ' + JSON.stringify(notification));\n  }\n);\n}\n}\n"],"mappings":";AAAA,SAASA,MAAM,QAAoB,eAAe;AAClD,SAGEC,iBAAiB,QAEZ,+BAA+B;AACtC,SAAQC,gBAAgB,QAAO,qBAAqB;;AAKpD,OAAM,MAAOC,wBAAwB;EAInCC,YAAA;IAFQ,KAAAC,kBAAkB,GAAqBL,MAAM,CAACE,gBAAgB,CAAC;EAEvD;EAElBI,IAAIA,CAAA;IACFC,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;IACpDP,iBAAiB,CAACQ,kBAAkB,EAAE,CAACC,IAAI,CAACC,MAAM,IAAG;MACnD,IAAIA,MAAM,CAACC,OAAO,KAAK,SAAS,EAAE;QAChC;QACAX,iBAAiB,CAACY,QAAQ,EAAE;MAC9B,CAAC,MAAM;QACL;QACA;MAAA;IAEJ,CAAC,CAAC;IACF,IAAI,CAACC,WAAW,EAAE;EACpB;EAEQA,WAAWA,CAAA;IAElB;IACAb,iBAAiB,CAACa,WAAW,CAAC,cAAc,EAC1CC,KAAY,IAAI;MACfC,KAAK,CAAC,oCAAoC,GAAGD,KAAK,CAACE,KAAK,CAAC;IAC3D,CAAC,CACF;IAED;IACAhB,iBAAiB,CAACa,WAAW,CAAC,mBAAmB,EAC9CI,KAAU,IAAI;MACbF,KAAK,CAAC,yBAAyB,GAAGG,IAAI,CAACC,SAAS,CAACF,KAAK,CAAC,CAAC;IAC1D,CAAC,CACF;IAED;IACAjB,iBAAiB,CAACa,WAAW,CAAC,0BAA0B,EACrDO,YAAoC,IAAI;MACvCL,KAAK,CAAC,iBAAiB,GAAGG,IAAI,CAACC,SAAS,CAACC,YAAY,CAAC,CAAC;IACzD,CAAC,CACF;IAED;IACApB,iBAAiB,CAACa,WAAW,CAAC,iCAAiC,EAC5DO,YAA6B,IAAI;MAChCL,KAAK,CAAC,yBAAyB,GAAGG,IAAI,CAACC,SAAS,CAACC,YAAY,CAAC,CAAC;IACjE,CAAC,CACF;EACD;;4BAjDalB,wBAAwB;;mCAAxBA,yBAAwB;AAAA;;SAAxBA,yBAAwB;EAAAmB,OAAA,EAAxBnB,yBAAwB,CAAAoB,IAAA;EAAAC,UAAA,EAFvB;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}