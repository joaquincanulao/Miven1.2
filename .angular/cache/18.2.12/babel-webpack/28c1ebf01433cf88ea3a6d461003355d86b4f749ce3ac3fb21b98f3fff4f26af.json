{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet BreakfastRecipesComponent = class BreakfastRecipesComponent {\n  constructor(recipeService, inventoryService, auth, firestore, router, readonlyecipe) {\n    this.recipeService = recipeService;\n    this.inventoryService = inventoryService;\n    this.auth = auth;\n    this.firestore = firestore;\n    this.router = router;\n    this.readonlyecipe = readonlyecipe;\n    this.breakfastRecipes = [];\n    this.filteredBreakfastRecipes = [];\n    this.isModalOpen = false;\n    this.selectedRecipe = null;\n    this.userId = null;\n    this.availableIngredients = [];\n    this.newComment = '';\n    this.newRating = 1;\n    this.favorites = [];\n  }\n  ngOnInit() {\n    this.auth.user.subscribe(user => {\n      if (user) {\n        this.userId = user.uid;\n        this.loadFavorites();\n      }\n    });\n    this.loadBreakfastRecipes();\n  }\n  loadBreakfastRecipes() {\n    this.recipeService.getRecipesByCategory('desayuno').subscribe(recipes => {\n      this.breakfastRecipes = recipes;\n      this.filteredBreakfastRecipes = recipes;\n      const ratingPromises = this.breakfastRecipes.map(recipe => this.loadRecipeRatings(recipe.id).then(averageRating => {\n        recipe.averageRating = averageRating;\n      }));\n      Promise.all(ratingPromises).then(() => {\n        // Ordenar recetas por calificación promedio\n        this.sortRecipesByRating();\n      });\n    });\n  }\n  sortRecipesByRating() {\n    this.filteredBreakfastRecipes.sort((a, b) => {\n      return (b.averageRating || 0) - (a.averageRating || 0);\n    });\n  }\n  onSearch(event) {\n    var _event$target$value;\n    const searchTerm = ((_event$target$value = event.target.value) === null || _event$target$value === void 0 ? void 0 : _event$target$value.toLowerCase()) || '';\n    if (!searchTerm) {\n      this.filteredBreakfastRecipes = this.breakfastRecipes;\n    } else {\n      this.filteredBreakfastRecipes = this.breakfastRecipes.filter(recipe => recipe.titulo.toLowerCase().includes(searchTerm));\n    }\n  }\n  openRecipeModal(recipe) {\n    this.selectedRecipe = recipe;\n    this.checkIngredientsAvailability(recipe.ingredientes);\n    this.recipeService.getRecipeCommentsWithUser(recipe.id).subscribe(comments => {\n      this.selectedRecipe.comentarios = comments;\n    });\n    this.isModalOpen = true;\n  }\n  closeModal() {\n    this.isModalOpen = false;\n    this.selectedRecipe = null;\n  }\n  //  disponibilidad de los ingredientes en el inventario...\n  checkIngredientsAvailability(recipeIngredients) {\n    if (this.userId) {\n      this.inventoryService.getInventory(this.userId).subscribe(inventory => {\n        this.availableIngredients = recipeIngredients.map(ingredient => {\n          const inventoryItem = inventory.find(item => {\n            var _item$nombre, _ingredient$nombre;\n            return (item === null || item === void 0 || (_item$nombre = item.nombre) === null || _item$nombre === void 0 ? void 0 : _item$nombre.toLowerCase()) === (ingredient === null || ingredient === void 0 || (_ingredient$nombre = ingredient.nombre) === null || _ingredient$nombre === void 0 ? void 0 : _ingredient$nombre.toLowerCase());\n          });\n          return {\n            nombre: ingredient.nombre,\n            cantidad: ingredient.cantidad,\n            unidad: ingredient.unidad,\n            disponible: inventoryItem ? inventoryItem.cantidad >= ingredient.cantidad : false\n          };\n        });\n      });\n    }\n  }\n  rateRecipe(rating) {\n    this.newRating = rating;\n  }\n  submitComment() {\n    if (this.selectedRecipe && this.userId && this.newComment.trim()) {\n      this.recipeService.addCommentWithRating(this.selectedRecipe.id, this.userId, this.newRating, this.newComment).then(() => {\n        console.log('Comentario y calificación enviados');\n        this.newComment = '';\n        this.newRating = 1;\n        this.closeModal();\n      }).catch(error => {\n        console.error('Error al enviar el comentario:', error);\n      });\n    } else {\n      console.error('Faltan datos para enviar el comentario o el usuario no está autenticado');\n    }\n  }\n  loadRecipeRatings(recipeId) {\n    return new Promise(resolve => {\n      this.firestore.collection('recetas').doc(recipeId).collection('comentarios').valueChanges().subscribe(comments => {\n        if (comments.length > 0) {\n          const totalRating = comments.reduce((acc, comment) => acc + comment.rating, 0);\n          const averageRating = totalRating / comments.length;\n          resolve(averageRating);\n        } else {\n          resolve(0); // Sin calificaciones\n        }\n      });\n    });\n  }\n  deleteRecipe(recipeId) {\n    if (confirm('¿Estás seguro de que deseas eliminar esta receta?')) {\n      this.recipeService.deleteRecipe(recipeId).then(() => {\n        console.log('Receta eliminada con éxito');\n        this.loadBreakfastRecipes();\n      }).catch(error => {\n        console.error('Error al eliminar la receta:', error);\n      });\n    }\n  }\n  loadFavorites() {\n    if (!this.userId) return;\n    this.firestore.collection('usuarios').doc(this.userId).collection('favoritos').valueChanges().subscribe(favorites => {\n      this.favorites = favorites;\n    });\n  }\n  addToFavorites(recipeId, category) {\n    if (this.userId) {\n      if (this.isFavorite(recipeId)) {\n        console.log('La receta ya está en favoritos');\n        return;\n      }\n      const favoriteRecipe = {\n        recipeId: recipe.id,\n        category: category,\n        creadorId: recipe.creadorId,\n        // Guardar el creadorId de la receta original\n        userId: this.userId,\n        dateAdded: new Date()\n      };\n      // Usar el ID de la receta como identificador del documento\n      this.firestore.collection('usuarios').doc(this.userId).collection('favoritos').doc(recipeId) // Aquí se establece el ID como el ID del documento\n      .set(favoriteRecipe).then(() => {\n        console.log('Receta agregada a favoritos con éxito');\n      }).catch(error => {\n        console.error('Error al agregar a favoritos:', error);\n      });\n    }\n  }\n  isFavorite(recipeId) {\n    return this.favorites.some(fav => fav.id === recipeId);\n  }\n  navigateToEdit(recipeId) {\n    // Navegar a la página de edición de recetas\n    this.router.navigate(['/edit-recipe', recipeId]);\n  }\n};\nBreakfastRecipesComponent = __decorate([Component({\n  selector: 'app-breakfast-recipes',\n  templateUrl: './breakfast-recipes.component.html',\n  styleUrls: ['./breakfast-recipes.component.scss']\n})], BreakfastRecipesComponent);\nexport { BreakfastRecipesComponent };","map":{"version":3,"names":["Component","BreakfastRecipesComponent","constructor","recipeService","inventoryService","auth","firestore","router","readonlyecipe","breakfastRecipes","filteredBreakfastRecipes","isModalOpen","selectedRecipe","userId","availableIngredients","newComment","newRating","favorites","ngOnInit","user","subscribe","uid","loadFavorites","loadBreakfastRecipes","getRecipesByCategory","recipes","ratingPromises","map","recipe","loadRecipeRatings","id","then","averageRating","Promise","all","sortRecipesByRating","sort","a","b","onSearch","event","_event$target$value","searchTerm","target","value","toLowerCase","filter","titulo","includes","openRecipeModal","checkIngredientsAvailability","ingredientes","getRecipeCommentsWithUser","comments","comentarios","closeModal","recipeIngredients","getInventory","inventory","ingredient","inventoryItem","find","item","_item$nombre","_ingredient$nombre","nombre","cantidad","unidad","disponible","rateRecipe","rating","submitComment","trim","addCommentWithRating","console","log","catch","error","recipeId","resolve","collection","doc","valueChanges","length","totalRating","reduce","acc","comment","deleteRecipe","confirm","addToFavorites","category","isFavorite","favoriteRecipe","creadorId","dateAdded","Date","set","some","fav","navigateToEdit","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/components/breakfast-recipes/breakfast-recipes.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { RecipeService, Recipe} from '../../services/recipe.service';\nimport { InventoryService } from '../../services/inventory.service'; \nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { Router } from '@angular/router';\n\n\n@Component({\n  selector: 'app-breakfast-recipes',\n  templateUrl: './breakfast-recipes.component.html',\n  styleUrls: ['./breakfast-recipes.component.scss']\n})\nexport class BreakfastRecipesComponent implements OnInit {\n  breakfastRecipes: any[] = [];\n  filteredBreakfastRecipes: any[] = [];\n  isModalOpen = false;\n  selectedRecipe: any | null = null;\n  userId: string | null = null;\n  availableIngredients: any[] = [];\n  newComment = '';\n  newRating: number = 1;\n  favorites: any[] = [];\n\n  constructor(\n    private recipeService: RecipeService, \n    private inventoryService: InventoryService,\n    private auth: AngularFireAuth,\n    private firestore: AngularFirestore,\n    private router: Router,\n    private readonlyecipe: Recipe, // Agregar el servicio Router\n  ) {}\n\n  ngOnInit(): void {\n    this.auth.user.subscribe(user => {\n      if (user) {\n        this.userId = user.uid;\n        this.loadFavorites();\n      }\n    });\n    this.loadBreakfastRecipes();\n  }\n\n  loadBreakfastRecipes() {\n  this.recipeService.getRecipesByCategory('desayuno').subscribe(recipes => {\n    this.breakfastRecipes = recipes;\n    this.filteredBreakfastRecipes = recipes;\n\n    const ratingPromises = this.breakfastRecipes.map(recipe => \n      this.loadRecipeRatings(recipe.id).then(averageRating => {\n        recipe.averageRating = averageRating;\n      })\n    );\n\n    Promise.all(ratingPromises).then(() => {\n      // Ordenar recetas por calificación promedio\n      this.sortRecipesByRating();\n    });\n  });\n}\n            \n  sortRecipesByRating() {\n    this.filteredBreakfastRecipes.sort((a, b) => {\n      return (b.averageRating || 0) - (a.averageRating || 0); \n      });\n  }\n\n  onSearch(event: any) {\n    const searchTerm = event.target.value?.toLowerCase() || '';\n    if (!searchTerm) {\n      this.filteredBreakfastRecipes = this.breakfastRecipes;\n    } else {\n      this.filteredBreakfastRecipes = this.breakfastRecipes.filter(recipe =>\n        recipe.titulo.toLowerCase().includes(searchTerm)\n      );\n    }\n  }\n\n  openRecipeModal(recipe: any) {\n    this.selectedRecipe = recipe;\n    this.checkIngredientsAvailability(recipe.ingredientes);\n    this.recipeService.getRecipeCommentsWithUser(recipe.id).subscribe((comments: any[]) => {\n      this.selectedRecipe.comentarios = comments;\n    });\n    this.isModalOpen = true;\n  }\n\n  closeModal() {\n    this.isModalOpen = false;\n    this.selectedRecipe = null;\n  }\n\n  //  disponibilidad de los ingredientes en el inventario...\n  checkIngredientsAvailability(recipeIngredients: { nombre: string; cantidad: number; unidad: string }[]) {\n    if (this.userId) {\n      this.inventoryService.getInventory(this.userId).subscribe(inventory => {\n        this.availableIngredients = recipeIngredients.map(ingredient => {\n          const inventoryItem = inventory.find(item => \n            item?.nombre?.toLowerCase() === ingredient?.nombre?.toLowerCase()\n          );\n          return {\n            nombre: ingredient.nombre,\n            cantidad: ingredient.cantidad,\n            unidad: ingredient.unidad,\n            disponible: inventoryItem ? inventoryItem.cantidad >= ingredient.cantidad : false\n          };\n        });\n      });\n    }\n  }\n\n  rateRecipe(rating: number) {\n    this.newRating = rating; \n  }\n\n  submitComment() {\n    if (this.selectedRecipe && this.userId && this.newComment.trim()) {\n      this.recipeService.addCommentWithRating(\n        this.selectedRecipe.id, \n        this.userId, \n        this.newRating, \n        this.newComment\n      ).then(() => {\n        console.log('Comentario y calificación enviados');\n        this.newComment = '';\n        this.newRating = 1;\n        this.closeModal();\n      }).catch(error => {\n        console.error('Error al enviar el comentario:', error);\n      });\n    } else {\n      console.error('Faltan datos para enviar el comentario o el usuario no está autenticado');\n    }\n  }\n\n  loadRecipeRatings(recipeId: string): Promise<number> {\n    return new Promise((resolve) => {\n      this.firestore.collection('recetas').doc(recipeId).collection('comentarios')\n        .valueChanges().subscribe((comments: any[]) => {\n          if (comments.length > 0) {\n            const totalRating = comments.reduce((acc, comment) => acc + comment.rating, 0);\n            const averageRating = totalRating / comments.length;\n            resolve(averageRating);\n          } else {\n            resolve(0); // Sin calificaciones\n          }\n        });\n    });\n  }\n\n\n  deleteRecipe(recipeId: string) {\n    if (confirm('¿Estás seguro de que deseas eliminar esta receta?')) {\n      this.recipeService.deleteRecipe(recipeId).then(() => {\n        console.log('Receta eliminada con éxito');\n        this.loadBreakfastRecipes();\n      }).catch(error => {\n        console.error('Error al eliminar la receta:', error);\n      });\n    }\n  }\n\n  loadFavorites() {\n    if (!this.userId) return;\n    this.firestore\n      .collection('usuarios')\n      .doc(this.userId)\n      .collection('favoritos')\n      .valueChanges()\n      .subscribe(favorites => {\n        this.favorites = favorites;\n      });\n  }\n\n  addToFavorites(recipeId: any, category: string) {\n    if (this.userId) {\n      if (this.isFavorite(recipeId)) {\n        console.log('La receta ya está en favoritos');\n        return;\n      }\n  \n      const favoriteRecipe = {\n        recipeId: recipe.id,\n        category: category,\n        creadorId: recipe.creadorId, // Guardar el creadorId de la receta original\n        userId: this.userId,\n        dateAdded: new Date()\n      };\n  \n      // Usar el ID de la receta como identificador del documento\n      this.firestore\n        .collection('usuarios')\n        .doc(this.userId)\n        .collection('favoritos')\n        .doc(recipeId) // Aquí se establece el ID como el ID del documento\n        .set(favoriteRecipe)\n        .then(() => {\n          console.log('Receta agregada a favoritos con éxito');\n        })\n        .catch(error => {\n          console.error('Error al agregar a favoritos:', error);\n        });\n    }\n  }\n  \n  isFavorite(recipeId: string): boolean {\n    return this.favorites.some(fav => fav.id === recipeId);\n  }\n  \n\n  navigateToEdit(recipeId: string) {\n    // Navegar a la página de edición de recetas\n    this.router.navigate(['/edit-recipe', recipeId]);\n  }\n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}