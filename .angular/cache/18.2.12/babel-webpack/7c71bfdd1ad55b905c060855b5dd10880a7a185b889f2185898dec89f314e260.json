{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DessertRecipesComponent = class DessertRecipesComponent {\n  constructor(recipeService, inventoryService, auth, firestore, router,\n  // Agregar el servicio Router\n  unitConversionService) {\n    this.recipeService = recipeService;\n    this.inventoryService = inventoryService;\n    this.auth = auth;\n    this.firestore = firestore;\n    this.router = router;\n    this.unitConversionService = unitConversionService;\n    this.dessertRecipes = [];\n    this.filteredDessertRecipes = [];\n    this.isModalOpen = false;\n    this.selectedRecipe = null;\n    this.userId = null;\n    this.availableIngredients = [];\n    this.newComment = '';\n    this.newRating = 1;\n    this.favorites = [];\n  }\n  ngOnInit() {\n    this.auth.user.subscribe(user => {\n      if (user) {\n        this.userId = user.uid;\n        this.loadFavorites();\n      }\n    });\n    this.loadDessertRecipes();\n  }\n  loadDessertRecipes() {\n    this.recipeService.getRecipesByCategory('postre').subscribe(recipes => {\n      this.dessertRecipes = recipes;\n      this.filteredDessertRecipes = recipes;\n      const ratingPromises = this.dessertRecipes.map(recipe => this.loadRecipeRatings(recipe.id).then(averageRating => {\n        recipe.averageRating = averageRating;\n      }));\n      Promise.all(ratingPromises).then(() => {\n        // Ordenar recetas por calificación promedio\n        this.sortRecipesByRating();\n      });\n    });\n  }\n  sortRecipesByRating() {\n    this.filteredDessertRecipes.sort((a, b) => {\n      return (b.averageRating || 0) - (a.averageRating || 0);\n    });\n  }\n  onSearch(event) {\n    var _event$target$value;\n    const searchTerm = ((_event$target$value = event.target.value) === null || _event$target$value === void 0 ? void 0 : _event$target$value.toLowerCase()) || '';\n    if (!searchTerm) {\n      this.filteredDessertRecipes = this.dessertRecipes;\n    } else {\n      this.filteredDessertRecipes = this.dessertRecipes.filter(recipe => recipe.titulo.toLowerCase().includes(searchTerm));\n    }\n  }\n  openRecipeModal(recipe) {\n    this.selectedRecipe = recipe;\n    this.checkIngredientsAvailability(recipe.ingredientes);\n    this.recipeService.getRecipeCommentsWithUser(recipe.id).subscribe(comments => {\n      this.selectedRecipe.comentarios = comments;\n    });\n    this.isModalOpen = true;\n  }\n  closeModal() {\n    this.isModalOpen = false;\n    this.selectedRecipe = null;\n  }\n  // Verificar la disponibilidad de los ingredientes en el inventario\n  checkIngredientsAvailability(recipeIngredients) {\n    const validUnits = ['gramos', 'ml', 'tazas', 'onzas'];\n    if (this.userId) {\n      this.inventoryService.getInventory(this.userId).subscribe(inventory => {\n        this.availableIngredients = recipeIngredients.map(ingredient => {\n          const inventoryItem = inventory.find(item => {\n            var _item$nombre, _ingredient$nombre;\n            return (item === null || item === void 0 || (_item$nombre = item.nombre) === null || _item$nombre === void 0 ? void 0 : _item$nombre.toLowerCase()) === (ingredient === null || ingredient === void 0 || (_ingredient$nombre = ingredient.nombre) === null || _ingredient$nombre === void 0 ? void 0 : _ingredient$nombre.toLowerCase());\n          });\n          if (inventoryItem) {\n            try {\n              const normalizedIngredientUnit = this.normalizeUnit(ingredient.unidad);\n              const normalizedInventoryUnit = this.normalizeUnit(inventoryItem.unidadMedida);\n              console.log(`Normalizando unidades: Ingrediente (${ingredient.unidad}) -> ${normalizedIngredientUnit}, Inventario (${inventoryItem.unidadMedida}) -> ${normalizedInventoryUnit}`);\n              if (!validUnits.includes(normalizedIngredientUnit) || !validUnits.includes(normalizedInventoryUnit)) {\n                throw new Error(`Unidad no válida: ${ingredient.unidad} o ${inventoryItem.unidadMedida}`);\n              }\n              const cantidadConvertida = this.inventoryService.convertirUnidad(ingredient.cantidad, normalizedIngredientUnit, normalizedInventoryUnit);\n              console.log(`Convirtiendo: ${ingredient.cantidad} ${normalizedIngredientUnit} a ${normalizedInventoryUnit}, Resultado: ${cantidadConvertida}`);\n              console.log(`Verificando cantidad: Inventario (${inventoryItem.cantidad} ${inventoryItem.unidadMedida}), Necesario (${cantidadConvertida} ${inventoryItem.unidadMedida})`);\n              const disponible = inventoryItem.cantidad >= cantidadConvertida;\n              return {\n                nombre: ingredient.nombre,\n                cantidad: ingredient.cantidad,\n                unidad: ingredient.unidad,\n                disponible\n              };\n            } catch (error) {\n              console.error(`Error al convertir ${ingredient.nombre}:`, error);\n              return {\n                nombre: ingredient.nombre,\n                cantidad: ingredient.cantidad,\n                unidad: ingredient.unidad,\n                disponible: false\n              };\n            }\n          } else {\n            return {\n              nombre: ingredient.nombre,\n              cantidad: ingredient.cantidad,\n              unidad: ingredient.unidad,\n              disponible: false\n            };\n          }\n        });\n      });\n    }\n  }\n  normalizeUnit(unit) {\n    switch (unit.toLowerCase()) {\n      case 'ml':\n        return 'ml';\n      case 'tazas':\n        return 'tazas';\n      case 'onzas':\n        return 'onzas';\n      case 'gramos':\n        return 'gramos';\n      default:\n        throw new Error(`Unidad no válida: ${unit}`);\n    }\n  }\n  rateRecipe(rating) {\n    this.newRating = rating;\n  }\n  submitComment() {\n    if (this.selectedRecipe && this.userId && this.newComment.trim()) {\n      this.recipeService.addCommentWithRating(this.selectedRecipe.id, this.userId, this.newRating, this.newComment).then(() => {\n        console.log('Comentario y calificación enviados');\n        this.newComment = '';\n        this.newRating = 1;\n        this.closeModal();\n      }).catch(error => {\n        console.error('Error al enviar el comentario:', error);\n      });\n    } else {\n      console.error('Faltan datos para enviar el comentario o el usuario no está autenticado');\n    }\n  }\n  loadRecipeRatings(recipeId) {\n    return new Promise(resolve => {\n      this.firestore.collection('recetas').doc(recipeId).collection('comentarios').valueChanges().subscribe(comments => {\n        if (comments.length > 0) {\n          const totalRating = comments.reduce((acc, comment) => acc + comment.rating, 0);\n          const averageRating = totalRating / comments.length;\n          resolve(averageRating);\n        } else {\n          resolve(0); // Sin calificaciones\n        }\n      });\n    });\n  }\n  deleteRecipe(recipeId) {\n    if (confirm('¿Estás seguro de que deseas eliminar esta receta?')) {\n      this.recipeService.deleteRecipe(recipeId).then(() => {\n        console.log('Receta eliminada con éxito');\n        this.loadDessertRecipes();\n      }).catch(error => {\n        console.error('Error al eliminar la receta:', error);\n      });\n    }\n  }\n  loadFavorites() {\n    if (!this.userId) return;\n    this.firestore.collection('usuarios').doc(this.userId).collection('favoritos').valueChanges().subscribe(favorites => {\n      this.favorites = favorites;\n    });\n  }\n  addToFavorites(recipeId, category) {\n    if (this.userId) {\n      if (this.isFavorite(recipeId)) {\n        console.log('La receta ya está en favoritos');\n        return;\n      }\n      const favoriteRecipe = {\n        recipeId: recipeId,\n        category: category,\n        userId: this.userId\n      };\n      this.firestore.collection('usuarios').doc(this.userId).collection('favoritos').add(favoriteRecipe).then(() => {\n        console.log('Receta agregada a favoritos');\n      }).catch(error => {\n        console.error('Error al agregar a favoritos:', error);\n      });\n    }\n  }\n  isFavorite(recipeId) {\n    return this.favorites.some(fav => fav.recipeId === recipeId);\n  }\n  navigateToEdit(recipeId) {\n    // Navegar a la página de edición de recetas\n    this.router.navigate(['/edit-recipe', recipeId]);\n  }\n};\nDessertRecipesComponent = __decorate([Component({\n  selector: 'app-dessert-recipes',\n  templateUrl: './dessert-recipes.component.html',\n  styleUrls: ['./dessert-recipes.component.scss']\n})], DessertRecipesComponent);\nexport { DessertRecipesComponent };","map":{"version":3,"names":["Component","DessertRecipesComponent","constructor","recipeService","inventoryService","auth","firestore","router","unitConversionService","dessertRecipes","filteredDessertRecipes","isModalOpen","selectedRecipe","userId","availableIngredients","newComment","newRating","favorites","ngOnInit","user","subscribe","uid","loadFavorites","loadDessertRecipes","getRecipesByCategory","recipes","ratingPromises","map","recipe","loadRecipeRatings","id","then","averageRating","Promise","all","sortRecipesByRating","sort","a","b","onSearch","event","_event$target$value","searchTerm","target","value","toLowerCase","filter","titulo","includes","openRecipeModal","checkIngredientsAvailability","ingredientes","getRecipeCommentsWithUser","comments","comentarios","closeModal","recipeIngredients","validUnits","getInventory","inventory","ingredient","inventoryItem","find","item","_item$nombre","_ingredient$nombre","nombre","normalizedIngredientUnit","normalizeUnit","unidad","normalizedInventoryUnit","unidadMedida","console","log","Error","cantidadConvertida","convertirUnidad","cantidad","disponible","error","unit","rateRecipe","rating","submitComment","trim","addCommentWithRating","catch","recipeId","resolve","collection","doc","valueChanges","length","totalRating","reduce","acc","comment","deleteRecipe","confirm","addToFavorites","category","isFavorite","favoriteRecipe","add","some","fav","navigateToEdit","navigate","__decorate","selector","templateUrl","styleUrls"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/components/dessert-recipes/dessert-recipes.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { RecipeService } from '../../services/recipe.service';\nimport { InventoryService } from '../../services/inventory.service'; \nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { Router } from '@angular/router';\n\ntype Unidad = 'gramos' | 'ml' | 'tazas' | 'onzas';\n\n@Component({\n  selector: 'app-dessert-recipes',\n  templateUrl: './dessert-recipes.component.html',\n  styleUrls: ['./dessert-recipes.component.scss']\n})\nexport class DessertRecipesComponent implements OnInit {\n  dessertRecipes: any[] = [];\n  filteredDessertRecipes: any[] = [];\n  isModalOpen = false;\n  selectedRecipe: any | null = null;\n  userId: string | null = null;\n  availableIngredients: any[] = [];\n  newComment = '';\n  newRating: number = 1;\n  favorites: any[] = [];\n\n  constructor(\n    private recipeService: RecipeService, \n    private inventoryService: InventoryService,\n    private auth: AngularFireAuth,\n    private firestore: AngularFirestore,\n    private router: Router, // Agregar el servicio Router\n    private unitConversionService: UnitConversionService\n  ) {}\n\n  ngOnInit(): void {\n    this.auth.user.subscribe(user => {\n      if (user) {\n        this.userId = user.uid;\n        this.loadFavorites();\n      }\n    });\n    this.loadDessertRecipes();\n  }\n  loadDessertRecipes() {\n  this.recipeService.getRecipesByCategory('postre').subscribe(recipes => {\n    this.dessertRecipes = recipes;\n    this.filteredDessertRecipes = recipes;\n\n    const ratingPromises = this.dessertRecipes.map(recipe => \n      this.loadRecipeRatings(recipe.id).then(averageRating => {\n        recipe.averageRating = averageRating;\n      })\n    );\n\n    Promise.all(ratingPromises).then(() => {\n      // Ordenar recetas por calificación promedio\n      this.sortRecipesByRating();\n    });\n  });\n}\n            \n  sortRecipesByRating() {\n    this.filteredDessertRecipes.sort((a, b) => {\n      return (b.averageRating || 0) - (a.averageRating || 0); \n      });\n  }\n\n  onSearch(event: any) {\n    const searchTerm = event.target.value?.toLowerCase() || '';\n    if (!searchTerm) {\n      this.filteredDessertRecipes = this.dessertRecipes;\n    } else {\n      this.filteredDessertRecipes = this.dessertRecipes.filter(recipe =>\n        recipe.titulo.toLowerCase().includes(searchTerm)\n      );\n    }\n  }\n\n  openRecipeModal(recipe: any) {\n    this.selectedRecipe = recipe;\n    this.checkIngredientsAvailability(recipe.ingredientes);\n    this.recipeService.getRecipeCommentsWithUser(recipe.id).subscribe((comments: any[]) => {\n      this.selectedRecipe.comentarios = comments;\n    });\n    this.isModalOpen = true;\n  }\n\n  closeModal() {\n    this.isModalOpen = false;\n    this.selectedRecipe = null;\n  }\n\n  // Verificar la disponibilidad de los ingredientes en el inventario\n  checkIngredientsAvailability(recipeIngredients: { nombre: string; cantidad: number; unidad: string }[]) {\n    const validUnits: Unidad[] = ['gramos', 'ml', 'tazas', 'onzas'];\n  \n    if (this.userId) {\n      this.inventoryService.getInventory(this.userId).subscribe(inventory => {\n        this.availableIngredients = recipeIngredients.map(ingredient => {\n          const inventoryItem = inventory.find(item =>\n            item?.nombre?.toLowerCase() === ingredient?.nombre?.toLowerCase()\n          );\n  \n          if (inventoryItem) {\n            try {\n              const normalizedIngredientUnit = this.normalizeUnit(ingredient.unidad);\n              const normalizedInventoryUnit = this.normalizeUnit(inventoryItem.unidadMedida);\n  \n              console.log(\n                `Normalizando unidades: Ingrediente (${ingredient.unidad}) -> ${normalizedIngredientUnit}, Inventario (${inventoryItem.unidadMedida}) -> ${normalizedInventoryUnit}`\n              );\n  \n              if (!validUnits.includes(normalizedIngredientUnit) || !validUnits.includes(normalizedInventoryUnit)) {\n                throw new Error(`Unidad no válida: ${ingredient.unidad} o ${inventoryItem.unidadMedida}`);\n              }\n  \n              const cantidadConvertida = this.inventoryService.convertirUnidad(\n                ingredient.cantidad,\n                normalizedIngredientUnit,\n                normalizedInventoryUnit\n              );\n  \n              console.log(\n                `Convirtiendo: ${ingredient.cantidad} ${normalizedIngredientUnit} a ${normalizedInventoryUnit}, Resultado: ${cantidadConvertida}`\n              );\n  \n              console.log(\n                `Verificando cantidad: Inventario (${inventoryItem.cantidad} ${inventoryItem.unidadMedida}), Necesario (${cantidadConvertida} ${inventoryItem.unidadMedida})`\n              );\n  \n              const disponible = inventoryItem.cantidad >= cantidadConvertida;\n  \n              return {\n                nombre: ingredient.nombre,\n                cantidad: ingredient.cantidad,\n                unidad: ingredient.unidad,\n                disponible\n              };\n            } catch (error) {\n              console.error(`Error al convertir ${ingredient.nombre}:`, error);\n              return {\n                nombre: ingredient.nombre,\n                cantidad: ingredient.cantidad,\n                unidad: ingredient.unidad,\n                disponible: false\n              };\n            }\n          } else {\n            return {\n              nombre: ingredient.nombre,\n              cantidad: ingredient.cantidad,\n              unidad: ingredient.unidad,\n              disponible: false\n            };\n          }\n        });\n      });\n    }\n  }\n  \n  \n  normalizeUnit(unit: string): Unidad {\n    switch (unit.toLowerCase()) {\n      case 'ml':\n        return 'ml';\n      case 'tazas':\n        return 'tazas';\n      case 'onzas':\n        return 'onzas';\n      case 'gramos':\n        return 'gramos';\n      default:\n        throw new Error(`Unidad no válida: ${unit}`);\n    }\n  }\n\n  rateRecipe(rating: number) {\n    this.newRating = rating; \n  }\n\n  submitComment() {\n    if (this.selectedRecipe && this.userId && this.newComment.trim()) {\n      this.recipeService.addCommentWithRating(\n        this.selectedRecipe.id, \n        this.userId, \n        this.newRating, \n        this.newComment\n      ).then(() => {\n        console.log('Comentario y calificación enviados');\n        this.newComment = '';\n        this.newRating = 1;\n        this.closeModal();\n      }).catch(error => {\n        console.error('Error al enviar el comentario:', error);\n      });\n    } else {\n      console.error('Faltan datos para enviar el comentario o el usuario no está autenticado');\n    }\n  }\n\n  loadRecipeRatings(recipeId: string): Promise<number> {\n    return new Promise((resolve) => {\n      this.firestore.collection('recetas').doc(recipeId).collection('comentarios')\n        .valueChanges().subscribe((comments: any[]) => {\n          if (comments.length > 0) {\n            const totalRating = comments.reduce((acc, comment) => acc + comment.rating, 0);\n            const averageRating = totalRating / comments.length;\n            resolve(averageRating);\n          } else {\n            resolve(0); // Sin calificaciones\n          }\n        });\n    });\n  }\n\n\n  deleteRecipe(recipeId: string) {\n    if (confirm('¿Estás seguro de que deseas eliminar esta receta?')) {\n      this.recipeService.deleteRecipe(recipeId).then(() => {\n        console.log('Receta eliminada con éxito');\n        this.loadDessertRecipes();\n      }).catch(error => {\n        console.error('Error al eliminar la receta:', error);\n      });\n    }\n  }\n\n  loadFavorites() {\n    if (!this.userId) return;\n    this.firestore\n      .collection('usuarios')\n      .doc(this.userId)\n      .collection('favoritos')\n      .valueChanges()\n      .subscribe(favorites => {\n        this.favorites = favorites;\n      });\n  }\n\n  addToFavorites(recipeId: string, category: string) {\n    if (this.userId) {\n    if (this.isFavorite(recipeId)) {\n        console.log('La receta ya está en favoritos');\n        return;\n      }\n\n      const favoriteRecipe = {\n        recipeId: recipeId,\n        category: category,\n        userId: this.userId\n      };\n      this.firestore.collection('usuarios').doc(this.userId).collection('favoritos').add(favoriteRecipe).then(() => {\n        console.log('Receta agregada a favoritos');\n      }).catch(error => {\n        console.error('Error al agregar a favoritos:', error);\n      });\n    }\n  }\n  isFavorite(recipeId: string): boolean {\n    return this.favorites.some(fav => fav.recipeId === recipeId);\n  }\n  navigateToEdit(recipeId: string) {\n    // Navegar a la página de edición de recetas\n    this.router.navigate(['/edit-recipe', recipeId]);\n  }\n  \n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}