{"ast":null,"code":"var _InventoryService;\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/common/http\";\nexport class InventoryService {\n  constructor(firestore, auth, http) {\n    this.firestore = firestore;\n    this.auth = auth;\n    this.http = http;\n    this.conversionTable = {\n      gramos: {\n        gramos: 1,\n        ml: 0,\n        // Conversión no aplicable\n        tazas: 128,\n        onzas: 28.35\n      },\n      ml: {\n        gramos: 0,\n        // Conversión no aplicable\n        ml: 1,\n        tazas: 240,\n        onzas: 29.5735\n      },\n      tazas: {\n        gramos: 1 / 128,\n        ml: 1 / 240,\n        tazas: 1,\n        onzas: 8\n      },\n      onzas: {\n        gramos: 1 / 28.35,\n        ml: 1 / 29.5735,\n        tazas: 1 / 8,\n        onzas: 1\n      }\n    };\n    this.fcmServerKey = 'BOV3uao1z47YpCi69vF5IMWazjO2ciGDGuLi_7DRcvKi4WinbLI2Hv2hScOCJtfiTpdQ9Yu6bK9n-fRTXN5S5Gc';\n  }\n  // Método para obtener el inventario del usuario\n  getInventory(userId) {\n    return this.firestore.collection('usuarios').doc(userId).collection('inventario').valueChanges({\n      idField: 'id'\n    });\n  }\n  // Método para agregar un ítem al inventario del usuario\n  addItemToInventory(item, userId) {\n    return this.firestore.collection('usuarios').doc(userId).collection('inventario').add(item);\n  }\n  // Método para agregar ítem a la colección global\n  addItemToGlobalCollection(item) {\n    return this.firestore.collection('items').add(item);\n  }\n  // Método para obtener los ítems globales\n  getGlobalItems() {\n    return this.firestore.collection('items').valueChanges({\n      idField: 'id'\n    });\n  }\n  // Método para eliminar un ítem del inventario del usuario\n  deleteItemFromInventory(itemId, userId) {\n    return this.firestore.collection('usuarios').doc(userId).collection('inventario').doc(itemId).delete();\n  }\n  // Método para actualizar la cantidad de un ítem en el inventario\n  updateItemQuantity(userId, itemId, newQuantity) {\n    return this.firestore.collection('usuarios').doc(userId).collection('inventario').doc(itemId).update({\n      cantidad: newQuantity\n    });\n  }\n  // Método para verificar los ítems que están próximos a vencer\n  getExpiringItems(userId) {\n    const currentDate = new Date();\n    const warningDate = new Date();\n    warningDate.setDate(currentDate.getDate() + 7); // Los ítems que expiran en los próximos 7 días\n    return this.getInventory(userId).pipe(map(items => items.filter(item => {\n      const expirationDate = new Date(item.fechaVencimiento);\n      return expirationDate <= warningDate && expirationDate >= currentDate;\n    })));\n  }\n  // Método para notificar a los usuarios sobre los ítems por vencer\n  notifyExpiringItems(userId, fcmToken) {\n    this.getExpiringItems(userId).subscribe(expiringItems => {\n      if (expiringItems.length > 0) {\n        const body = {\n          notification: {\n            title: '¡Atención!',\n            body: `Tienes ${expiringItems.length} ítems por vencer en tu inventario.`,\n            click_action: 'FCM_PLUGIN_ACTIVITY',\n            icon: 'fcm_push_icon'\n          },\n          to: fcmToken // El token de FCM del usuario\n        };\n        // Enviar la notificación al servidor FCM\n        this.http.post('https://fcm.googleapis.com/fcm/send', body, {\n          headers: {\n            Authorization: `key=${this.fcmServerKey}`,\n            'Content-Type': 'application/json'\n          }\n        }).subscribe(() => console.log('Notificación enviada con éxito'), error => console.error('Error al enviar la notificación:', error));\n      }\n    });\n  }\n  convertirUnidad(cantidad, unidadOrigen, unidadDestino) {\n    var _this$conversionTable;\n    if (unidadOrigen === unidadDestino) return cantidad;\n    const conversionFactor = (_this$conversionTable = this.conversionTable[unidadOrigen]) === null || _this$conversionTable === void 0 ? void 0 : _this$conversionTable[unidadDestino];\n    if (!conversionFactor) {\n      throw new Error(`No se puede convertir de ${unidadOrigen} a ${unidadDestino}`);\n    }\n    return cantidad * conversionFactor;\n  }\n  verificarIngredienteEnInventario(userId, ingrediente) {\n    return this.getInventory(userId).pipe(map(inventario => {\n      const itemInventario = inventario.find(item => item.nombre.toLowerCase() === ingrediente.nombre.toLowerCase());\n      if (!itemInventario) {\n        return false; // El ingrediente no está en el inventario\n      }\n      try {\n        const cantidadConvertida = this.convertirUnidad(ingrediente.cantidad, ingrediente.unidad, itemInventario.unidadMedida);\n        return itemInventario.cantidad >= cantidadConvertida;\n      } catch (error) {\n        console.error(`Error al convertir ${ingrediente.nombre}:`, error);\n        return false;\n      }\n    }));\n  }\n}\n_InventoryService = InventoryService;\n_InventoryService.ɵfac = function InventoryService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _InventoryService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.HttpClient));\n};\n_InventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _InventoryService,\n  factory: _InventoryService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["map","InventoryService","constructor","firestore","auth","http","conversionTable","gramos","ml","tazas","onzas","fcmServerKey","getInventory","userId","collection","doc","valueChanges","idField","addItemToInventory","item","add","addItemToGlobalCollection","getGlobalItems","deleteItemFromInventory","itemId","delete","updateItemQuantity","newQuantity","update","cantidad","getExpiringItems","currentDate","Date","warningDate","setDate","getDate","pipe","items","filter","expirationDate","fechaVencimiento","notifyExpiringItems","fcmToken","subscribe","expiringItems","length","body","notification","title","click_action","icon","to","post","headers","Authorization","console","log","error","convertirUnidad","unidadOrigen","unidadDestino","_this$conversionTable","conversionFactor","Error","verificarIngredienteEnInventario","ingrediente","inventario","itemInventario","find","nombre","toLowerCase","cantidadConvertida","unidad","unidadMedida","i0","ɵɵinject","i1","AngularFirestore","i2","AngularFireAuth","i3","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/services/inventory.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http'; // Para hacer solicitudes HTTP\nimport { conversionTable } from '../shared/constants/unit-conversion';\n\ntype Unidad = 'gramos' | 'ml' | 'tazas' | 'onzas';\n\ninterface InventoryItem {\n  nombre: string;\n  cantidad: number;\n  fechaVencimiento: string; // Guardaremos la fecha como un string para simplificar\n  unidadMedida: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InventoryService {\n  private conversionTable: Record<Unidad, Record<Unidad, number>> = {\n    gramos: {\n      gramos: 1,\n      ml: 0, // Conversión no aplicable\n      tazas: 128,\n      onzas: 28.35,\n    },\n    ml: {\n      gramos: 0, // Conversión no aplicable\n      ml: 1,\n      tazas: 240,\n      onzas: 29.5735,\n    },\n    tazas: {\n      gramos: 1 / 128,\n      ml: 1 / 240,\n      tazas: 1,\n      onzas: 8,\n    },\n    onzas: {\n      gramos: 1 / 28.35,\n      ml: 1 / 29.5735,\n      tazas: 1 / 8,\n      onzas: 1,\n    },\n  };\n  \n  private fcmServerKey = 'BOV3uao1z47YpCi69vF5IMWazjO2ciGDGuLi_7DRcvKi4WinbLI2Hv2hScOCJtfiTpdQ9Yu6bK9n-fRTXN5S5Gc';\n  \n  \n  \n  \n  constructor(private firestore: AngularFirestore, \n              private auth: AngularFireAuth, \n              private http: HttpClient) {}\n\n  // Método para obtener el inventario del usuario\n  getInventory(userId: string): Observable<any[]> {\n    return this.firestore\n      .collection('usuarios')\n      .doc(userId)\n      .collection('inventario')\n      .valueChanges({ idField: 'id' });\n  }\n\n  // Método para agregar un ítem al inventario del usuario\n  addItemToInventory(item: InventoryItem, userId: string) {\n    return this.firestore\n      .collection('usuarios')\n      .doc(userId)\n      .collection('inventario')\n      .add(item);\n  }\n\n  // Método para agregar ítem a la colección global\n  addItemToGlobalCollection(item: any) {\n    return this.firestore.collection('items').add(item);\n  }\n\n  // Método para obtener los ítems globales\n  getGlobalItems(): Observable<any[]> {\n    return this.firestore.collection('items').valueChanges({ idField: 'id' });\n  }\n\n  // Método para eliminar un ítem del inventario del usuario\n  deleteItemFromInventory(itemId: string, userId: string) {\n    return this.firestore\n      .collection('usuarios')\n      .doc(userId)\n      .collection('inventario')\n      .doc(itemId)\n      .delete();\n  }\n\n // Método para actualizar la cantidad de un ítem en el inventario\n updateItemQuantity(userId: string, itemId: string, newQuantity: number) {\n  return this.firestore\n    .collection('usuarios')\n    .doc(userId)\n    .collection('inventario')\n    .doc(itemId)\n    .update({ cantidad: newQuantity });\n}\n\n\n\n\n\n    // Método para verificar los ítems que están próximos a vencer\n    getExpiringItems(userId: string): Observable<any[]> {\n      const currentDate = new Date();\n      const warningDate = new Date();\n      warningDate.setDate(currentDate.getDate() + 7); // Los ítems que expiran en los próximos 7 días\n  \n      return this.getInventory(userId).pipe(\n        map(items => items.filter(item => {\n          const expirationDate = new Date(item.fechaVencimiento);\n          return expirationDate <= warningDate && expirationDate >= currentDate;\n        }))\n      );\n    }\n  \n    // Método para notificar a los usuarios sobre los ítems por vencer\n    notifyExpiringItems(userId: string, fcmToken: string) {\n      this.getExpiringItems(userId).subscribe(expiringItems => {\n        if (expiringItems.length > 0) {\n          const body = {\n            notification: {\n              title: '¡Atención!',\n              body: `Tienes ${expiringItems.length} ítems por vencer en tu inventario.`,\n              click_action: 'FCM_PLUGIN_ACTIVITY',\n              icon: 'fcm_push_icon'\n            },\n            to: fcmToken // El token de FCM del usuario\n          };\n  \n          // Enviar la notificación al servidor FCM\n          this.http.post('https://fcm.googleapis.com/fcm/send', body, {\n            headers: {\n              Authorization: `key=${this.fcmServerKey}`,\n              'Content-Type': 'application/json'\n            }\n          }).subscribe(\n            () => console.log('Notificación enviada con éxito'),\n            error => console.error('Error al enviar la notificación:', error)\n          );\n        }\n      });\n    }\n\n    convertirUnidad(cantidad: number, unidadOrigen: Unidad, unidadDestino: Unidad): number {\n      if (unidadOrigen === unidadDestino) return cantidad;\n    \n      const conversionFactor = this.conversionTable[unidadOrigen]?.[unidadDestino];\n      if (!conversionFactor) {\n        throw new Error(`No se puede convertir de ${unidadOrigen} a ${unidadDestino}`);\n      }\n    \n      return cantidad * conversionFactor;\n    }\n  \n    verificarIngredienteEnInventario(\n      userId: string,\n      ingrediente: { nombre: string; cantidad: number; unidad: Unidad }\n    ): Observable<boolean> {\n      return this.getInventory(userId).pipe(\n        map((inventario) => {\n          const itemInventario = inventario.find(\n            (item) => item.nombre.toLowerCase() === ingrediente.nombre.toLowerCase()\n          );\n  \n          if (!itemInventario) {\n            return false; // El ingrediente no está en el inventario\n          }\n  \n          try {\n            const cantidadConvertida = this.convertirUnidad(\n              ingrediente.cantidad,\n              ingrediente.unidad,\n              itemInventario.unidadMedida as Unidad\n            );\n  \n            return itemInventario.cantidad >= cantidadConvertida;\n          } catch (error) {\n            console.error(`Error al convertir ${ingrediente.nombre}:`, error);\n            return false;\n          }\n        })\n      );\n    }\n  }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}