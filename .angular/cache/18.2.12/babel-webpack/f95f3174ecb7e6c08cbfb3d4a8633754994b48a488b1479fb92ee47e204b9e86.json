{"ast":null,"code":"import _asyncToGenerator from \"/home/jcanulao/Documentos/Miven1.0.0-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { SortMenuComponent } from '../sort-menu/sort-menu.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/inventory.service\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/router\";\nimport * as i6 from \"@angular/forms\";\nfunction InventoryComponent_div_9_ion_card_1_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\")(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r1.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Venci\\u00F3 el: \", item_r1.fechaVencimiento, \"\");\n  }\n}\nfunction InventoryComponent_div_9_ion_card_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 9)(1, \"ion-card-header\")(2, \"ion-card-title\");\n    i0.ɵɵtext(3, \"Productos Vencidos\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"ion-card-content\")(5, \"ion-list\");\n    i0.ɵɵtemplate(6, InventoryComponent_div_9_ion_card_1_ion_item_6_Template, 6, 2, \"ion-item\", 4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.expiredItems);\n  }\n}\nfunction InventoryComponent_div_9_ion_card_2_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\")(2, \"h3\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r3.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Vence el: \", item_r3.fechaVencimiento, \"\");\n  }\n}\nfunction InventoryComponent_div_9_ion_card_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-card\", 10)(1, \"ion-card-header\")(2, \"ion-card-title\");\n    i0.ɵɵtext(3, \"Productos por Vencer\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"ion-card-content\")(5, \"ion-list\");\n    i0.ɵɵtemplate(6, InventoryComponent_div_9_ion_card_2_ion_item_6_Template, 6, 2, \"ion-item\", 4);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.expiringSoonItems);\n  }\n}\nfunction InventoryComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, InventoryComponent_div_9_ion_card_1_Template, 7, 1, \"ion-card\", 7)(2, InventoryComponent_div_9_ion_card_2_Template, 7, 1, \"ion-card\", 8);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.expiredItems.length > 0);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.expiringSoonItems.length > 0);\n  }\n}\nfunction InventoryComponent_ion_item_11_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\")(2, \"h2\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"p\");\n    i0.ɵɵtext(5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"p\");\n    i0.ɵɵtext(7);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"ion-button\", 1);\n    i0.ɵɵlistener(\"click\", function InventoryComponent_ion_item_11_Template_ion_button_click_8_listener() {\n      const item_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.startEditItem(item_r5));\n    });\n    i0.ɵɵtext(9, \"Editar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(10, \"ion-button\", 11);\n    i0.ɵɵlistener(\"click\", function InventoryComponent_ion_item_11_Template_ion_button_click_10_listener() {\n      const item_r5 = i0.ɵɵrestoreView(_r4).$implicit;\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.deleteItem(item_r5.id));\n    });\n    i0.ɵɵtext(11, \"Eliminar\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r5 = ctx.$implicit;\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(item_r5.nombre);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\"Cantidad: \", item_r5.cantidad, \" \", item_r5.unidadMedida, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Fecha de Vencimiento: \", item_r5.fechaVencimiento, \"\");\n  }\n}\nfunction InventoryComponent_ng_template_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n    i0.ɵɵtext(3, \"Editar Cantidad\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"ion-buttons\", 12)(5, \"ion-button\", 1);\n    i0.ɵɵlistener(\"click\", function InventoryComponent_ng_template_13_Template_ion_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.closeEditModal());\n    });\n    i0.ɵɵtext(6, \"Cerrar\");\n    i0.ɵɵelementEnd()()()();\n    i0.ɵɵelementStart(7, \"ion-content\")(8, \"ion-item\")(9, \"ion-label\", 13);\n    i0.ɵɵtext(10, \"Nueva Cantidad\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(11, \"ion-input\", 14);\n    i0.ɵɵtwoWayListener(\"ngModelChange\", function InventoryComponent_ng_template_13_Template_ion_input_ngModelChange_11_listener($event) {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.editItemCantidad, $event) || (ctx_r1.editItemCantidad = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"ion-button\", 15);\n    i0.ɵɵlistener(\"click\", function InventoryComponent_ng_template_13_Template_ion_button_click_12_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.updateItemQuantity());\n    });\n    i0.ɵɵtext(13, \"Guardar Cambios\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(11);\n    i0.ɵɵtwoWayProperty(\"ngModel\", ctx_r1.editItemCantidad);\n  }\n}\nexport let InventoryComponent = /*#__PURE__*/(() => {\n  var _InventoryComponent;\n  class InventoryComponent {\n    constructor(inventoryService, auth, popoverController, alertController) {\n      this.inventoryService = inventoryService;\n      this.auth = auth;\n      this.popoverController = popoverController;\n      this.alertController = alertController;\n      this.inventoryItems = [];\n      this.sortedInventory = [];\n      this.expiredItems = [];\n      this.expiringSoonItems = [];\n      this.userId = null;\n      this.editItemCantidad = null;\n      this.editItemId = null;\n      this.isEditModalOpen = false;\n    }\n    ngOnInit() {\n      this.auth.user.subscribe(user => {\n        if (user) {\n          this.userId = user.uid;\n          this.loadInventory();\n        }\n      });\n      this.requestNotificationPermission();\n    }\n    // Método para cargar el inventario del usuario\n    loadInventory() {\n      if (this.userId) {\n        this.inventoryService.getInventory(this.userId).subscribe(items => {\n          this.inventoryItems = items;\n          this.sortInventory('alphabetical');\n          this.checkExpiringItems();\n        });\n      }\n    }\n    openSortMenu(ev) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        const popover = yield _this.popoverController.create({\n          component: SortMenuComponent,\n          event: ev,\n          translucent: true\n        });\n        yield popover.present();\n        const {\n          data\n        } = yield popover.onDidDismiss();\n        if (data) {\n          _this.sortInventory(data);\n        }\n      })();\n    }\n    // Método para ordenar el inventario...\n    sortInventory(type) {\n      if (type === 'alphabetical') {\n        this.sortedInventory = [...this.inventoryItems].sort((a, b) => a.nombre.localeCompare(b.nombre));\n      } else if (type === 'expiration') {\n        this.sortedInventory = [...this.inventoryItems].sort((a, b) => {\n          return new Date(a.fechaVencimiento).getTime() - new Date(b.fechaVencimiento).getTime();\n        });\n      }\n    }\n    // Solicitar permiso de notificación al usuario:3\n    requestNotificationPermission() {\n      if ('Notification' in window) {\n        Notification.requestPermission().then(permission => {\n          if (permission === 'granted') {\n            console.log('Permiso para notificaciones otorgado');\n          } else {\n            console.log('Notificaciones bloqueadas');\n          }\n        });\n      }\n    }\n    // Enviar notificación para ítems próximos a vencer...\n    sendNotification(itemName, expirationDate) {\n      if ('Notification' in window && Notification.permission === 'granted') {\n        new Notification('Producto por vencer', {\n          body: `El ítem ${itemName} vence el ${expirationDate}.`,\n          icon: 'assets/icon/alert.png' // Cambia por el ícono que prefieras\n        });\n      }\n    }\n    // Método para eliminar un ítem del inventario\n    deleteItem(itemId) {\n      if (this.userId && confirm('¿Estás seguro de que deseas eliminar este ítem del inventario?')) {\n        this.inventoryService.deleteItemFromInventory(itemId, this.userId).then(() => {\n          console.log('Ítem eliminado con éxito');\n          this.loadInventory();\n        }).catch(error => {\n          console.error('Error al eliminar el ítem:', error);\n        });\n      }\n    }\n    startEditItem(item) {\n      this.editItemCantidad = item.cantidad;\n      this.editItemId = item.id;\n      this.isEditModalOpen = true;\n    }\n    closeEditModal() {\n      this.isEditModalOpen = false;\n      this.editItemCantidad = null;\n      this.editItemId = null;\n    }\n    updateItemQuantity() {\n      if (this.userId && this.editItemId && this.editItemCantidad != null) {\n        this.inventoryService.updateItemQuantity(this.userId, this.editItemId, this.editItemCantidad).then(() => {\n          console.log('Cantidad actualizada con éxito');\n          this.closeEditModal(); // Cerrar el modal después de la actualización\n        }).catch(error => {\n          console.error('Error al actualizar la cantidad:', error);\n        });\n      }\n    }\n    convertDate(fecha) {\n      if (fecha instanceof Date) {\n        return fecha; // Si ya es un objeto Date, regresarlo directamente\n      }\n      if (typeof fecha === 'string') {\n        const parts = fecha.split('-');\n        if (parts.length === 3) {\n          // Convertir de Dias, meses y años a años, meses y días.\n          const [day, month, year] = parts.map(part => parseInt(part, 10));\n          return new Date(year, month - 1, day);\n        }\n      }\n      console.error('Formato de fecha inválido:', fecha);\n      return new Date(NaN); // Retornar fecha inválida si no coincide el formato\n    }\n    // Verificar productos vencidos y por vencer\n    checkExpiringItems() {\n      const today = new Date();\n      const oneWeekFromNow = new Date();\n      oneWeekFromNow.setDate(today.getDate() + 7);\n      console.log('Hoy es:', today);\n      console.log('Una semana desde hoy es:', oneWeekFromNow);\n      this.expiredItems = this.inventoryItems.filter(item => {\n        const expiryDate = this.convertDate(item.fechaVencimiento);\n        if (isNaN(expiryDate.getTime())) {\n          console.warn(`Fecha inválida para el ítem ${item.nombre}:`, item.fechaVencimiento);\n          return false;\n        }\n        return expiryDate < today; // Productos ya vencidos\n      });\n      this.expiringSoonItems = this.inventoryItems.filter(item => {\n        const expiryDate = this.convertDate(item.fechaVencimiento);\n        if (isNaN(expiryDate.getTime())) {\n          console.warn(`Fecha inválida para el ítem ${item.nombre}:`, item.fechaVencimiento);\n          return false;\n        }\n        return expiryDate >= today && expiryDate <= oneWeekFromNow; // Por vencer en 7 días\n      });\n      console.log('Productos vencidos:', this.expiredItems);\n      console.log('Productos por vencer:', this.expiringSoonItems);\n      this.showAlerts();\n    }\n    // Mostrar alertas para productos vencidos y por vencer\n    showAlerts() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        if (_this2.expiredItems.length > 0) {\n          const alert = yield _this2.alertController.create({\n            header: 'Productos Vencidos',\n            message: `Tienes ${_this2.expiredItems.length} producto(s) vencido(s):${_this2.expiredItems.map(item => item.nombre).join(', ')}`,\n            buttons: ['OK']\n          });\n          yield alert.present();\n        }\n        if (_this2.expiringSoonItems.length > 0) {\n          const alert = yield _this2.alertController.create({\n            header: 'Productos por Vencer',\n            message: `Tienes ${_this2.expiringSoonItems.length} producto(s) que vencerán pronto:<br>${_this2.expiringSoonItems.map(item => item.nombre).join(', ')}`,\n            buttons: ['OK']\n          });\n          yield alert.present();\n        }\n      })();\n    }\n    processItems(expiredItems, expiringItems) {\n      console.log(\"Expired Items:\", expiredItems);\n      console.log(\"Expiring Items:\", expiringItems);\n    }\n  }\n  _InventoryComponent = InventoryComponent;\n  _InventoryComponent.ɵfac = function InventoryComponent_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _InventoryComponent)(i0.ɵɵdirectiveInject(i1.InventoryService), i0.ɵɵdirectiveInject(i2.AngularFireAuth), i0.ɵɵdirectiveInject(i3.PopoverController), i0.ɵɵdirectiveInject(i3.AlertController));\n  };\n  _InventoryComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _InventoryComponent,\n    selectors: [[\"app-inventory\"]],\n    decls: 16,\n    vars: 3,\n    consts: [[\"slot\", \"start\"], [3, \"click\"], [\"name\", \"funnel\", \"slot\", \"icon-only\"], [4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"isOpen\"], [\"expand\", \"full\", \"routerLink\", \"/add-item\"], [\"color\", \"danger\", 4, \"ngIf\"], [\"color\", \"warning\", 4, \"ngIf\"], [\"color\", \"danger\"], [\"color\", \"warning\"], [\"color\", \"danger\", 3, \"click\"], [\"slot\", \"end\"], [\"position\", \"floating\"], [\"type\", \"number\", 3, \"ngModelChange\", \"ngModel\"], [\"expand\", \"full\", 3, \"click\"]],\n    template: function InventoryComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-buttons\", 0);\n        i0.ɵɵelement(3, \"ion-menu-button\");\n        i0.ɵɵelementStart(4, \"ion-title\");\n        i0.ɵɵtext(5, \"Inventario\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"ion-button\", 1);\n        i0.ɵɵlistener(\"click\", function InventoryComponent_Template_ion_button_click_6_listener($event) {\n          return ctx.openSortMenu($event);\n        });\n        i0.ɵɵelement(7, \"ion-icon\", 2);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(8, \"ion-content\");\n        i0.ɵɵtemplate(9, InventoryComponent_div_9_Template, 3, 2, \"div\", 3);\n        i0.ɵɵelementStart(10, \"ion-list\");\n        i0.ɵɵtemplate(11, InventoryComponent_ion_item_11_Template, 12, 4, \"ion-item\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"ion-modal\", 5);\n        i0.ɵɵtemplate(13, InventoryComponent_ng_template_13_Template, 14, 1, \"ng-template\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-button\", 6);\n        i0.ɵɵtext(15, \"Agregar \\u00CDtem\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"ngIf\", ctx.expiredItems.length > 0 || ctx.expiringSoonItems.length > 0);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.sortedInventory);\n        i0.ɵɵadvance();\n        i0.ɵɵproperty(\"isOpen\", ctx.isEditModalOpen);\n      }\n    },\n    dependencies: [i4.NgForOf, i4.NgIf, i3.IonButton, i3.IonButtons, i3.IonCard, i3.IonCardContent, i3.IonCardHeader, i3.IonCardTitle, i3.IonContent, i3.IonHeader, i3.IonIcon, i3.IonInput, i3.IonItem, i3.IonLabel, i3.IonList, i3.IonMenuButton, i3.IonTitle, i3.IonToolbar, i3.IonModal, i3.NumericValueAccessor, i3.RouterLinkDelegate, i5.RouterLink, i6.NgControlStatus, i6.NgModel]\n  });\n  return InventoryComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}