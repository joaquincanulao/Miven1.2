{"ast":null,"code":"import _asyncToGenerator from \"/home/jcanulao/Documentos/Miven1.0.0-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { combineLatest } from 'rxjs';\nimport firebase from 'firebase/compat/app';\nimport { switchMap, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nexport let RecipeService = /*#__PURE__*/(() => {\n  var _RecipeService;\n  class RecipeService {\n    constructor(firestore, auth) {\n      this.firestore = firestore;\n      this.auth = auth;\n    }\n    // Método para agregar una receta a Firestore\n    addRecipe(recipe) {\n      return this.firestore.collection('recetas').add(recipe);\n    }\n    // Método para obtener todas las recetas\n    getAllRecipes() {\n      return this.firestore.collection('recetas').valueChanges({\n        idField: 'id'\n      });\n    }\n    // Método para obtener recetas por categoría\n    getRecipesByCategory(category) {\n      return this.firestore.collection('recetas', ref => ref.where('categoria', '==', category)).valueChanges({\n        idField: 'id'\n      });\n    }\n    // Método para eliminar una receta\n    deleteRecipe(recipeId) {\n      return this.firestore.collection('recetas').doc(recipeId).delete();\n    }\n    // Método para obtener comentarios con detalles de usuarios\n    getRecipeCommentsWithUser(recipeId) {\n      return this.firestore.collection('recetas').doc(recipeId).collection('comentarios', ref => ref.orderBy('timestamp', 'desc')).snapshotChanges().pipe(switchMap(actions => {\n        const userObservables = actions.map(a => {\n          const data = a.payload.doc.data();\n          const id = a.payload.doc.id;\n          // Obtener detalles adicionales del usuario\n          return this.firestore.collection('usuarios').doc(data.userId).get().pipe(map(userDoc => {\n            const userData = userDoc.data() || {};\n            return {\n              ...data,\n              id,\n              userName: userData.nombre || 'Usuario Anónimo',\n              timestamp: data.timestamp.toDate()\n            };\n          }));\n        });\n        return combineLatest(userObservables);\n      }));\n    }\n    // Método para agregar un comentario con calificación a una receta\n    addCommentWithRating(recipeId, userId, rating, comment) {\n      var _this = this;\n      return this.firestore.firestore.runTransaction( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (transaction) {\n          var _data$ratingCount, _data$ratingTotal;\n          const recipeRef = _this.firestore.collection('recetas').doc(recipeId).ref;\n          const recipeDoc = yield transaction.get(recipeRef);\n          if (!recipeDoc.exists) {\n            throw new Error(\"Receta no encontrada\");\n          }\n          // Obtener los datos existentes de la receta\n          const data = recipeDoc.data() || {};\n          const ratingCount = (_data$ratingCount = data.ratingCount) !== null && _data$ratingCount !== void 0 ? _data$ratingCount : 0;\n          const ratingTotal = (_data$ratingTotal = data.ratingTotal) !== null && _data$ratingTotal !== void 0 ? _data$ratingTotal : 0;\n          const newRatingCount = ratingCount + 1;\n          const newRatingTotal = ratingTotal + rating;\n          const newAverageRating = newRatingTotal / newRatingCount;\n          // Actualizar la receta con el nuevo promedio y conteo de calificaciones\n          transaction.update(recipeRef, {\n            ratingCount: newRatingCount,\n            ratingTotal: newRatingTotal,\n            rating: newAverageRating // Promedio de las calificaciones\n          });\n          // Añadir el comentario a la subcolección de comentarios\n          const commentRef = _this.firestore.collection('recetas').doc(recipeId).collection('comentarios').doc();\n          transaction.set(commentRef.ref, {\n            userId,\n            rating,\n            // Calificación proporcionada\n            comment,\n            // Comentario del usuario\n            timestamp: firebase.firestore.FieldValue.serverTimestamp()\n          });\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    markAsFavorite(recipeId, userId, isFavorite) {\n      return this.firestore.collection('usuarios').doc(userId).collection('favoritos').doc(recipeId).set({\n        favorita: isFavorite\n      });\n    }\n    getFavoriteRecipes(userId) {\n      return this.firestore.collection('usuarios').doc(userId).collection('favoritos').valueChanges();\n    }\n    getRecipeById(recipeId) {\n      return this.firestore.collection('recetas').doc(recipeId).valueChanges().pipe(\n      // Filtra valores undefined\n      map(recipe => {\n        if (!recipe) {\n          throw new Error(`Receta con ID ${recipeId} no encontrada`);\n        }\n        return recipe;\n      }));\n    }\n    updateRecipe(recipeId, recipeData) {\n      return this.firestore.collection('recetas').doc(recipeId).update(recipeData);\n    }\n  }\n  _RecipeService = RecipeService;\n  _RecipeService.ɵfac = function RecipeService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _RecipeService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth));\n  };\n  _RecipeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _RecipeService,\n    factory: _RecipeService.ɵfac,\n    providedIn: 'root'\n  });\n  return RecipeService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}