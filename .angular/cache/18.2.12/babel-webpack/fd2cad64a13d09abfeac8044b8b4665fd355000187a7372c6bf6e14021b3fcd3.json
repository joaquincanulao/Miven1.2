{"ast":null,"code":"var _UnitConversionService;\nimport * as i0 from \"@angular/core\";\nexport class UnitConversionService {\n  constructor() {\n    this.conversionTable = {\n      gramos: {\n        gramos: 1,\n        ml: 0,\n        tazas: 0,\n        onzas: 0\n      },\n      ml: {\n        gramos: 0,\n        ml: 1,\n        tazas: 1 / 240,\n        onzas: 1 / 29.5735\n      },\n      tazas: {\n        gramos: 0,\n        ml: 240,\n        tazas: 1,\n        onzas: 8\n      },\n      onzas: {\n        gramos: 0,\n        ml: 29.5735,\n        tazas: 1 / 8,\n        onzas: 1\n      }\n    };\n  }\n  convertirUnidad(cantidad, unidadOrigen, unidadDestino) {\n    var _this$conversionTable;\n    if (unidadOrigen === unidadDestino) return cantidad;\n    const conversionFactor = (_this$conversionTable = this.conversionTable[unidadOrigen]) === null || _this$conversionTable === void 0 ? void 0 : _this$conversionTable[unidadDestino];\n    if (!conversionFactor) {\n      throw new Error(`No se puede convertir de ${unidadOrigen} a ${unidadDestino}`);\n    }\n    return cantidad * conversionFactor;\n  }\n}\n_UnitConversionService = UnitConversionService;\n_UnitConversionService.ɵfac = function UnitConversionService_Factory(__ngFactoryType__) {\n  return new (__ngFactoryType__ || _UnitConversionService)();\n};\n_UnitConversionService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _UnitConversionService,\n  factory: _UnitConversionService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UnitConversionService","constructor","conversionTable","gramos","ml","tazas","onzas","convertirUnidad","cantidad","unidadOrigen","unidadDestino","_this$conversionTable","conversionFactor","Error","factory","ɵfac","providedIn"],"sources":["/home/jcanulao/Documentos/Miven1.0.0-main/src/app/shared/services/unit-conversion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\ntype Unidad = 'gramos' | 'ml' | 'tazas' | 'onzas';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UnitConversionService {\n  private conversionTable: Record<Unidad, Record<Unidad, number>> = {\n    gramos: { gramos: 1, ml: 0, tazas: 0, onzas: 0 },\n    ml: { gramos: 0, ml: 1, tazas: 1 / 240, onzas: 1 / 29.5735 },\n    tazas: { gramos: 0, ml: 240, tazas: 1, onzas: 8 },\n    onzas: { gramos: 0, ml: 29.5735, tazas: 1 / 8, onzas: 1 },\n  };\n\n  convertirUnidad(cantidad: number, unidadOrigen: Unidad, unidadDestino: Unidad): number {\n    if (unidadOrigen === unidadDestino) return cantidad;\n\n    const conversionFactor = this.conversionTable[unidadOrigen]?.[unidadDestino];\n    if (!conversionFactor) {\n      throw new Error(`No se puede convertir de ${unidadOrigen} a ${unidadDestino}`);\n    }\n\n    return cantidad * conversionFactor;\n  }\n}\n\n"],"mappings":";;AAOA,OAAM,MAAOA,qBAAqB;EAHlCC,YAAA;IAIU,KAAAC,eAAe,GAA2C;MAChEC,MAAM,EAAE;QAAEA,MAAM,EAAE,CAAC;QAAEC,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAC,CAAE;MAChDF,EAAE,EAAE;QAAED,MAAM,EAAE,CAAC;QAAEC,EAAE,EAAE,CAAC;QAAEC,KAAK,EAAE,CAAC,GAAG,GAAG;QAAEC,KAAK,EAAE,CAAC,GAAG;MAAO,CAAE;MAC5DD,KAAK,EAAE;QAAEF,MAAM,EAAE,CAAC;QAAEC,EAAE,EAAE,GAAG;QAAEC,KAAK,EAAE,CAAC;QAAEC,KAAK,EAAE;MAAC,CAAE;MACjDA,KAAK,EAAE;QAAEH,MAAM,EAAE,CAAC;QAAEC,EAAE,EAAE,OAAO;QAAEC,KAAK,EAAE,CAAC,GAAG,CAAC;QAAEC,KAAK,EAAE;MAAC;KACxD;;EAEDC,eAAeA,CAACC,QAAgB,EAAEC,YAAoB,EAAEC,aAAqB;IAAA,IAAAC,qBAAA;IAC3E,IAAIF,YAAY,KAAKC,aAAa,EAAE,OAAOF,QAAQ;IAEnD,MAAMI,gBAAgB,IAAAD,qBAAA,GAAG,IAAI,CAACT,eAAe,CAACO,YAAY,CAAC,cAAAE,qBAAA,uBAAlCA,qBAAA,CAAqCD,aAAa,CAAC;IAC5E,IAAI,CAACE,gBAAgB,EAAE;MACrB,MAAM,IAAIC,KAAK,CAAC,4BAA4BJ,YAAY,MAAMC,aAAa,EAAE,CAAC;IAChF;IAEA,OAAOF,QAAQ,GAAGI,gBAAgB;EACpC;;yBAjBWZ,qBAAqB;;mCAArBA,sBAAqB;AAAA;;SAArBA,sBAAqB;EAAAc,OAAA,EAArBd,sBAAqB,CAAAe,IAAA;EAAAC,UAAA,EAFpB;AAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}