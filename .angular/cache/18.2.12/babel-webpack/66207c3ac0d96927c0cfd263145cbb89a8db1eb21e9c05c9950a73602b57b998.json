{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/common/http\";\nexport let InventoryService = /*#__PURE__*/(() => {\n  var _InventoryService;\n  class InventoryService {\n    constructor(firestore, auth, http) {\n      this.firestore = firestore;\n      this.auth = auth;\n      this.http = http;\n      this.conversionTable = {\n        gramos: {\n          gramos: 1,\n          ml: 0,\n          // Conversión no aplicable\n          tazas: 128,\n          onzas: 28.35\n        },\n        ml: {\n          gramos: 0,\n          // Conversión no aplicable\n          ml: 1,\n          tazas: 240,\n          onzas: 29.5735\n        },\n        tazas: {\n          gramos: 1 / 128,\n          ml: 1 / 240,\n          tazas: 1,\n          onzas: 8\n        },\n        onzas: {\n          gramos: 1 / 28.35,\n          ml: 1 / 29.5735,\n          tazas: 1 / 8,\n          onzas: 1\n        }\n      };\n      this.fcmServerKey = 'BOV3uao1z47YpCi69vF5IMWazjO2ciGDGuLi_7DRcvKi4WinbLI2Hv2hScOCJtfiTpdQ9Yu6bK9n-fRTXN5S5Gc';\n    }\n    // Método para obtener el inventario del usuario\n    getInventory(userId) {\n      return this.firestore.collection('usuarios').doc(userId).collection('inventario').valueChanges({\n        idField: 'id'\n      });\n    }\n    // Método para agregar un ítem al inventario del usuario\n    addItemToInventory(item, userId) {\n      return this.firestore.collection('usuarios').doc(userId).collection('inventario').add(item);\n    }\n    // Método para agregar ítem a la colección global\n    addItemToGlobalCollection(item) {\n      return this.firestore.collection('items').add(item);\n    }\n    // Método para obtener los ítems globales\n    getGlobalItems() {\n      return this.firestore.collection('items').valueChanges({\n        idField: 'id'\n      });\n    }\n    // Método para eliminar un ítem del inventario del usuario\n    deleteItemFromInventory(itemId, userId) {\n      return this.firestore.collection('usuarios').doc(userId).collection('inventario').doc(itemId).delete();\n    }\n    // Método para actualizar la cantidad de un ítem en el inventario\n    updateItemQuantity(userId, itemId, newQuantity) {\n      return this.firestore.collection('usuarios').doc(userId).collection('inventario').doc(itemId).update({\n        cantidad: newQuantity\n      });\n    }\n    // Método para verificar los ítems que están próximos a vencer\n    getExpiringItems(userId) {\n      const currentDate = new Date();\n      const warningDate = new Date();\n      warningDate.setDate(currentDate.getDate() + 7); // Los ítems que expiran en los próximos 7 días\n      return this.getInventory(userId).pipe(map(items => items.filter(item => {\n        const expirationDate = new Date(item.fechaVencimiento);\n        return expirationDate <= warningDate && expirationDate >= currentDate;\n      })));\n    }\n    // Método para notificar a los usuarios sobre los ítems por vencer\n    notifyExpiringItems(userId, fcmToken) {\n      this.getExpiringItems(userId).subscribe(expiringItems => {\n        if (expiringItems.length > 0) {\n          const body = {\n            notification: {\n              title: '¡Atención!',\n              body: `Tienes ${expiringItems.length} ítems por vencer en tu inventario.`,\n              click_action: 'FCM_PLUGIN_ACTIVITY',\n              icon: 'fcm_push_icon'\n            },\n            to: fcmToken // El token de FCM del usuario\n          };\n          // Enviar la notificación al servidor FCM\n          this.http.post('https://fcm.googleapis.com/fcm/send', body, {\n            headers: {\n              Authorization: `key=${this.fcmServerKey}`,\n              'Content-Type': 'application/json'\n            }\n          }).subscribe(() => console.log('Notificación enviada con éxito'), error => console.error('Error al enviar la notificación:', error));\n        }\n      });\n    }\n    convertirUnidad(cantidad, unidadOrigen, unidadDestino) {\n      var _this$conversionTable;\n      if (unidadOrigen === unidadDestino) return cantidad;\n      const conversionFactor = (_this$conversionTable = this.conversionTable[unidadOrigen]) === null || _this$conversionTable === void 0 ? void 0 : _this$conversionTable[unidadDestino];\n      if (!conversionFactor) {\n        throw new Error(`No se puede convertir de ${unidadOrigen} a ${unidadDestino}`);\n      }\n      return cantidad * conversionFactor;\n    }\n    verificarIngredienteEnInventario(userId, ingrediente) {\n      return this.getInventory(userId).pipe(map(inventario => {\n        const itemInventario = inventario.find(item => item.nombre.toLowerCase() === ingrediente.nombre.toLowerCase());\n        if (!itemInventario) {\n          return false; // El ingrediente no está en el inventario\n        }\n        try {\n          const cantidadConvertida = this.convertirUnidad(ingrediente.cantidad, ingrediente.unidad, itemInventario.unidadMedida);\n          return itemInventario.cantidad >= cantidadConvertida;\n        } catch (error) {\n          console.error(`Error al convertir ${ingrediente.nombre}:`, error);\n          return false;\n        }\n      }));\n    }\n  }\n  _InventoryService = InventoryService;\n  _InventoryService.ɵfac = function InventoryService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _InventoryService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.AngularFireAuth), i0.ɵɵinject(i3.HttpClient));\n  };\n  _InventoryService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _InventoryService,\n    factory: _InventoryService.ɵfac,\n    providedIn: 'root'\n  });\n  return InventoryService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}