{"ast":null,"code":"import _asyncToGenerator from \"/home/jcanulao/.local/share/Trash/files/Miven1.6.0.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport firebase from 'firebase/compat/app';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  var _AuthService;\n  class AuthService {\n    constructor(auth, firestore, router) {\n      this.auth = auth;\n      this.firestore = firestore;\n      this.router = router;\n    }\n    // Método para registrar usuarios y crear su inventario\n    registerUser(email, password, nombre) {\n      this.auth.createUserWithEmailAndPassword(email, password).then(userCredential => {\n        this.router.navigate(['./login']);\n        const user = userCredential.user;\n        if (user) {\n          // Crear un documento para el usuario\n          this.firestore.collection('usuarios').doc(user.uid).set({\n            nombre: nombre,\n            correo_electronico: email,\n            fecha_registro: new Date()\n          }).then(() => {\n            // Crear una subcolección de inventario para el usuario recién registrado\n            const inventarioRef = this.firestore.collection('usuarios').doc(user.uid).collection('inventario');\n            // Inicializar el inventario con algunos productos predeterminados o vacío\n            inventarioRef.add({\n              nombre_producto: 'Producto Ejemplo',\n              cantidad: 0,\n              unidad_medida: 'unidades',\n              fecha_caducidad: new Date(),\n              categoria: 'General'\n            });\n          });\n        }\n      }).catch(error => {\n        console.error('Error en el registro:', error);\n      });\n    }\n    // Método para iniciar sesión de usuario\n    loginUser(email, password) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Intentar iniciar sesión con el correo y la contraseña\n          const userCredential = yield _this.auth.signInWithEmailAndPassword(email, password);\n          // Navegar a la página principal solo si la autenticación fue exitosa\n          _this.router.navigate(['./home']);\n          return userCredential;\n        } catch (error) {\n          // Manejar errores de inicio de sesión\n          console.error('Error en el inicio de sesión:', error);\n          throw error; // Lanza el error para que el componente que llama maneje el mensaje de error\n        }\n      })();\n    }\n    // Método para iniciar sesión con Google y registrar al usuario en Firestore si es la primera vez\n    loginWithGoogle() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const result = yield _this2.auth.signInWithPopup(new firebase.auth.GoogleAuthProvider());\n          const user = result.user;\n          if (user) {\n            // Verificar si el usuario ya está registrado en Firestore\n            const userDocRef = _this2.firestore.collection('usuarios').doc(user.uid);\n            const userDoc = yield userDocRef.get().toPromise();\n            // Verificar si el documento existe\n            if (userDoc && !userDoc.exists) {\n              // Registrar al usuario en la colección 'usuarios' si no existe\n              yield userDocRef.set({\n                nombre: user.displayName,\n                correo_electronico: user.email,\n                fecha_registro: new Date()\n              });\n              // Inicializar inventario para el nuevo usuario\n              const inventarioRef = userDocRef.collection('inventario');\n              yield inventarioRef.add({\n                nombre_producto: 'Producto Ejemplo',\n                cantidad: 0,\n                unidad_medida: 'unidades',\n                fecha_caducidad: new Date(),\n                categoria: 'General'\n              });\n            }\n          }\n          // Navegar a home si el inicio de sesión con Google es exitoso\n          _this2.router.navigate(['./home']);\n          return result;\n        } catch (error) {\n          console.error('Error al iniciar sesión con Google:', error);\n          throw error;\n        }\n      })();\n    }\n    // Método para cerrar sesión\n    logoutUser() {\n      return this.auth.signOut().then(() => {\n        this.router.navigate(['/login']);\n      });\n    }\n    // Método para obtener el usuario autenticado actual\n    getCurrentUser() {\n      return this.auth.currentUser;\n    }\n    getUserData(uid) {\n      return this.firestore.collection('usuarios').doc(uid).valueChanges();\n    }\n    getInfoUser() {\n      return this.auth.authState;\n    }\n  }\n  _AuthService = AuthService;\n  _AuthService.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _AuthService)(i0.ɵɵinject(i1.AngularFireAuth), i0.ɵɵinject(i2.AngularFirestore), i0.ɵɵinject(i3.Router));\n  };\n  _AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: _AuthService,\n    factory: _AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}