{"ast":null,"code":"import _asyncToGenerator from \"/home/jcanulao/.local/share/Trash/files/Miven1.6.0.0/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getMessaging, getToken } from \"firebase/messaging\";\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/auth.service\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nimport * as i3 from \"@angular/fire/compat/firestore\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/forms\";\nimport * as i6 from \"@ionic/angular\";\nimport * as i7 from \"@angular/router\";\nfunction LoginPage_ion_text_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-text\", 9);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.errorMessage);\n  }\n}\nexport let LoginPage = /*#__PURE__*/(() => {\n  var _LoginPage;\n  class LoginPage {\n    constructor(authService, afAuth,\n    // Servicio para autenticación\n    firestore // Servicio para interactuar con Firestore\n    ) {\n      this.authService = authService;\n      this.afAuth = afAuth;\n      this.firestore = firestore;\n      this.email = '';\n      this.password = '';\n      this.errorMessage = ''; // Variable para almacenar el mensaje de error\n    }\n    onLogin() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          // Iniciar sesión con las credenciales\n          yield _this.authService.loginUser(_this.email, _this.password);\n          console.log('Inicio de sesión exitoso');\n          // Obtener el usuario autenticado\n          const user = yield _this.afAuth.currentUser;\n          if (user) {\n            // Llamar a la función para obtener y almacenar el token FCM\n            _this.saveFcmToken(user.uid);\n          }\n        } catch (error) {\n          console.error('Error al iniciar sesión: ', error);\n          _this.errorMessage = _this.getErrorMessage(error); // Manejo del mensaje de error\n        }\n      })();\n    }\n    // Nuevo método para iniciar sesión con Google\n    onGoogleLogin() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.authService.loginWithGoogle();\n          console.log('Inicio de sesión con Google exitoso');\n        } catch (error) {\n          _this2.errorMessage = _this2.getErrorMessage(error);\n        }\n      })();\n    }\n    getErrorMessage(error) {\n      switch (error.code) {\n        case 'auth/invalid-credential':\n          return 'Las credenciales proporcionadas no son válidas. Por favor, verifica tu correo electrónico y contraseña.';\n        case 'auth/user-not-found':\n          return 'Usuario no encontrado. Por favor, registra una nueva cuenta.';\n        case 'auth/wrong-password':\n          return 'Contraseña incorrecta. Por favor, intenta de nuevo.';\n        default:\n          return 'Ha ocurrido un error desconocido. Por favor, intenta de nuevo más tarde.';\n      }\n    }\n    // Función para obtener el token FCM y guardarlo en Firestore\n    saveFcmToken(userId) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const messaging = getMessaging();\n          const currentToken = yield getToken(messaging, {\n            vapidKey: environment.vapidKey\n          });\n          if (currentToken) {\n            // Guardar el token FCM en Firestore bajo el documento del usuario\n            const userRef = _this3.firestore.collection('usuarios').doc(userId);\n            yield userRef.update({\n              fcmToken: currentToken\n            });\n            console.log('Token FCM guardado en Firestore');\n          } else {\n            console.log('No token available');\n          }\n        } catch (err) {\n          console.error('Error obteniendo el token FCM: ', err);\n        }\n      })();\n    }\n  }\n  _LoginPage = LoginPage;\n  _LoginPage.ɵfac = function LoginPage_Factory(__ngFactoryType__) {\n    return new (__ngFactoryType__ || _LoginPage)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.AngularFireAuth), i0.ɵɵdirectiveInject(i3.AngularFirestore));\n  };\n  _LoginPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _LoginPage,\n    selectors: [[\"app-login\"]],\n    decls: 23,\n    vars: 3,\n    consts: [[1, \"ion-padding\"], [\"position\", \"floating\"], [\"type\", \"email\", 3, \"ngModelChange\", \"ngModel\"], [\"type\", \"password\", 3, \"ngModelChange\", \"ngModel\"], [\"expand\", \"full\", 3, \"click\"], [\"expand\", \"full\", \"color\", \"medium\", 3, \"click\"], [\"name\", \"logo-google\", \"slot\", \"start\"], [\"expand\", \"full\", \"fill\", \"clear\", \"routerLink\", \"/register\"], [\"color\", \"danger\", 4, \"ngIf\"], [\"color\", \"danger\"]],\n    template: function LoginPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Iniciar Sesi\\u00F3n\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\", 0)(5, \"ion-card\")(6, \"ion-card-content\")(7, \"ion-item\")(8, \"ion-label\", 1);\n        i0.ɵɵtext(9, \"Correo Electr\\u00F3nico\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ion-input\", 2);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginPage_Template_ion_input_ngModelChange_10_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.email, $event) || (ctx.email = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"ion-item\")(12, \"ion-label\", 1);\n        i0.ɵɵtext(13, \"Contrase\\u00F1a\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-input\", 3);\n        i0.ɵɵtwoWayListener(\"ngModelChange\", function LoginPage_Template_ion_input_ngModelChange_14_listener($event) {\n          i0.ɵɵtwoWayBindingSet(ctx.password, $event) || (ctx.password = $event);\n          return $event;\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"ion-button\", 4);\n        i0.ɵɵlistener(\"click\", function LoginPage_Template_ion_button_click_15_listener() {\n          return ctx.onLogin();\n        });\n        i0.ɵɵtext(16, \"Iniciar Sesi\\u00F3n\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"ion-button\", 5);\n        i0.ɵɵlistener(\"click\", function LoginPage_Template_ion_button_click_17_listener() {\n          return ctx.onGoogleLogin();\n        });\n        i0.ɵɵelement(18, \"ion-icon\", 6);\n        i0.ɵɵtext(19, \" Iniciar sesi\\u00F3n con Google \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"ion-button\", 7);\n        i0.ɵɵtext(21, \"Crear Cuenta\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, LoginPage_ion_text_22_Template, 2, 1, \"ion-text\", 8);\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(10);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.email);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtwoWayProperty(\"ngModel\", ctx.password);\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.errorMessage);\n      }\n    },\n    dependencies: [i4.NgIf, i5.NgControlStatus, i5.NgModel, i6.IonButton, i6.IonCard, i6.IonCardContent, i6.IonContent, i6.IonHeader, i6.IonIcon, i6.IonInput, i6.IonItem, i6.IonLabel, i6.IonText, i6.IonTitle, i6.IonToolbar, i6.TextValueAccessor, i6.RouterLinkDelegate, i7.RouterLink]\n  });\n  return LoginPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}